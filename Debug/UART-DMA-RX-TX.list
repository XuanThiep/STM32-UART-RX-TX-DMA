
UART-DMA-RX-TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001670  080081f8  080081f8  000081f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009868  08009868  00009868  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009888  08009888  00009888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009890  08009890  00009890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009894  08009894  00009894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08009898  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000040c  2000000c  080098a4  0001000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000418  080098a4  00010418  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000108a6  00000000  00000000  0001003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002708  00000000  00000000  000208e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002b50  00000000  00000000  00022fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000600  00000000  00000000  00025b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e10  00000000  00000000  00026138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004142  00000000  00000000  00026f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002fa7  00000000  00000000  0002b08a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002e031  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000da4  00000000  00000000  0002e0b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080081f8 <__do_global_dtors_aux>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	4c05      	ldr	r4, [pc, #20]	; (8008210 <__do_global_dtors_aux+0x18>)
 80081fc:	7823      	ldrb	r3, [r4, #0]
 80081fe:	b933      	cbnz	r3, 800820e <__do_global_dtors_aux+0x16>
 8008200:	4b04      	ldr	r3, [pc, #16]	; (8008214 <__do_global_dtors_aux+0x1c>)
 8008202:	b113      	cbz	r3, 800820a <__do_global_dtors_aux+0x12>
 8008204:	4804      	ldr	r0, [pc, #16]	; (8008218 <__do_global_dtors_aux+0x20>)
 8008206:	f3af 8000 	nop.w
 800820a:	2301      	movs	r3, #1
 800820c:	7023      	strb	r3, [r4, #0]
 800820e:	bd10      	pop	{r4, pc}
 8008210:	2000000c 	.word	0x2000000c
 8008214:	00000000 	.word	0x00000000
 8008218:	08009850 	.word	0x08009850

0800821c <frame_dummy>:
 800821c:	b508      	push	{r3, lr}
 800821e:	4b03      	ldr	r3, [pc, #12]	; (800822c <frame_dummy+0x10>)
 8008220:	b11b      	cbz	r3, 800822a <frame_dummy+0xe>
 8008222:	4903      	ldr	r1, [pc, #12]	; (8008230 <frame_dummy+0x14>)
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <frame_dummy+0x18>)
 8008226:	f3af 8000 	nop.w
 800822a:	bd08      	pop	{r3, pc}
 800822c:	00000000 	.word	0x00000000
 8008230:	20000010 	.word	0x20000010
 8008234:	08009850 	.word	0x08009850

08008238 <__aeabi_uldivmod>:
 8008238:	b953      	cbnz	r3, 8008250 <__aeabi_uldivmod+0x18>
 800823a:	b94a      	cbnz	r2, 8008250 <__aeabi_uldivmod+0x18>
 800823c:	2900      	cmp	r1, #0
 800823e:	bf08      	it	eq
 8008240:	2800      	cmpeq	r0, #0
 8008242:	bf1c      	itt	ne
 8008244:	f04f 31ff 	movne.w	r1, #4294967295
 8008248:	f04f 30ff 	movne.w	r0, #4294967295
 800824c:	f000 b97a 	b.w	8008544 <__aeabi_idiv0>
 8008250:	f1ad 0c08 	sub.w	ip, sp, #8
 8008254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008258:	f000 f806 	bl	8008268 <__udivmoddi4>
 800825c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008264:	b004      	add	sp, #16
 8008266:	4770      	bx	lr

08008268 <__udivmoddi4>:
 8008268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800826c:	468c      	mov	ip, r1
 800826e:	460d      	mov	r5, r1
 8008270:	4604      	mov	r4, r0
 8008272:	9e08      	ldr	r6, [sp, #32]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d151      	bne.n	800831c <__udivmoddi4+0xb4>
 8008278:	428a      	cmp	r2, r1
 800827a:	4617      	mov	r7, r2
 800827c:	d96d      	bls.n	800835a <__udivmoddi4+0xf2>
 800827e:	fab2 fe82 	clz	lr, r2
 8008282:	f1be 0f00 	cmp.w	lr, #0
 8008286:	d00b      	beq.n	80082a0 <__udivmoddi4+0x38>
 8008288:	f1ce 0c20 	rsb	ip, lr, #32
 800828c:	fa01 f50e 	lsl.w	r5, r1, lr
 8008290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008294:	fa02 f70e 	lsl.w	r7, r2, lr
 8008298:	ea4c 0c05 	orr.w	ip, ip, r5
 800829c:	fa00 f40e 	lsl.w	r4, r0, lr
 80082a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80082a4:	0c25      	lsrs	r5, r4, #16
 80082a6:	fbbc f8fa 	udiv	r8, ip, sl
 80082aa:	fa1f f987 	uxth.w	r9, r7
 80082ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80082b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80082b6:	fb08 f309 	mul.w	r3, r8, r9
 80082ba:	42ab      	cmp	r3, r5
 80082bc:	d90a      	bls.n	80082d4 <__udivmoddi4+0x6c>
 80082be:	19ed      	adds	r5, r5, r7
 80082c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80082c4:	f080 8123 	bcs.w	800850e <__udivmoddi4+0x2a6>
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	f240 8120 	bls.w	800850e <__udivmoddi4+0x2a6>
 80082ce:	f1a8 0802 	sub.w	r8, r8, #2
 80082d2:	443d      	add	r5, r7
 80082d4:	1aed      	subs	r5, r5, r3
 80082d6:	b2a4      	uxth	r4, r4
 80082d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80082dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80082e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80082e4:	fb00 f909 	mul.w	r9, r0, r9
 80082e8:	45a1      	cmp	r9, r4
 80082ea:	d909      	bls.n	8008300 <__udivmoddi4+0x98>
 80082ec:	19e4      	adds	r4, r4, r7
 80082ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80082f2:	f080 810a 	bcs.w	800850a <__udivmoddi4+0x2a2>
 80082f6:	45a1      	cmp	r9, r4
 80082f8:	f240 8107 	bls.w	800850a <__udivmoddi4+0x2a2>
 80082fc:	3802      	subs	r0, #2
 80082fe:	443c      	add	r4, r7
 8008300:	eba4 0409 	sub.w	r4, r4, r9
 8008304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008308:	2100      	movs	r1, #0
 800830a:	2e00      	cmp	r6, #0
 800830c:	d061      	beq.n	80083d2 <__udivmoddi4+0x16a>
 800830e:	fa24 f40e 	lsr.w	r4, r4, lr
 8008312:	2300      	movs	r3, #0
 8008314:	6034      	str	r4, [r6, #0]
 8008316:	6073      	str	r3, [r6, #4]
 8008318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800831c:	428b      	cmp	r3, r1
 800831e:	d907      	bls.n	8008330 <__udivmoddi4+0xc8>
 8008320:	2e00      	cmp	r6, #0
 8008322:	d054      	beq.n	80083ce <__udivmoddi4+0x166>
 8008324:	2100      	movs	r1, #0
 8008326:	e886 0021 	stmia.w	r6, {r0, r5}
 800832a:	4608      	mov	r0, r1
 800832c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008330:	fab3 f183 	clz	r1, r3
 8008334:	2900      	cmp	r1, #0
 8008336:	f040 808e 	bne.w	8008456 <__udivmoddi4+0x1ee>
 800833a:	42ab      	cmp	r3, r5
 800833c:	d302      	bcc.n	8008344 <__udivmoddi4+0xdc>
 800833e:	4282      	cmp	r2, r0
 8008340:	f200 80fa 	bhi.w	8008538 <__udivmoddi4+0x2d0>
 8008344:	1a84      	subs	r4, r0, r2
 8008346:	eb65 0503 	sbc.w	r5, r5, r3
 800834a:	2001      	movs	r0, #1
 800834c:	46ac      	mov	ip, r5
 800834e:	2e00      	cmp	r6, #0
 8008350:	d03f      	beq.n	80083d2 <__udivmoddi4+0x16a>
 8008352:	e886 1010 	stmia.w	r6, {r4, ip}
 8008356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835a:	b912      	cbnz	r2, 8008362 <__udivmoddi4+0xfa>
 800835c:	2701      	movs	r7, #1
 800835e:	fbb7 f7f2 	udiv	r7, r7, r2
 8008362:	fab7 fe87 	clz	lr, r7
 8008366:	f1be 0f00 	cmp.w	lr, #0
 800836a:	d134      	bne.n	80083d6 <__udivmoddi4+0x16e>
 800836c:	1beb      	subs	r3, r5, r7
 800836e:	0c3a      	lsrs	r2, r7, #16
 8008370:	fa1f fc87 	uxth.w	ip, r7
 8008374:	2101      	movs	r1, #1
 8008376:	fbb3 f8f2 	udiv	r8, r3, r2
 800837a:	0c25      	lsrs	r5, r4, #16
 800837c:	fb02 3318 	mls	r3, r2, r8, r3
 8008380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8008384:	fb0c f308 	mul.w	r3, ip, r8
 8008388:	42ab      	cmp	r3, r5
 800838a:	d907      	bls.n	800839c <__udivmoddi4+0x134>
 800838c:	19ed      	adds	r5, r5, r7
 800838e:	f108 30ff 	add.w	r0, r8, #4294967295
 8008392:	d202      	bcs.n	800839a <__udivmoddi4+0x132>
 8008394:	42ab      	cmp	r3, r5
 8008396:	f200 80d1 	bhi.w	800853c <__udivmoddi4+0x2d4>
 800839a:	4680      	mov	r8, r0
 800839c:	1aed      	subs	r5, r5, r3
 800839e:	b2a3      	uxth	r3, r4
 80083a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80083a4:	fb02 5510 	mls	r5, r2, r0, r5
 80083a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80083ac:	fb0c fc00 	mul.w	ip, ip, r0
 80083b0:	45a4      	cmp	ip, r4
 80083b2:	d907      	bls.n	80083c4 <__udivmoddi4+0x15c>
 80083b4:	19e4      	adds	r4, r4, r7
 80083b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ba:	d202      	bcs.n	80083c2 <__udivmoddi4+0x15a>
 80083bc:	45a4      	cmp	ip, r4
 80083be:	f200 80b8 	bhi.w	8008532 <__udivmoddi4+0x2ca>
 80083c2:	4618      	mov	r0, r3
 80083c4:	eba4 040c 	sub.w	r4, r4, ip
 80083c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80083cc:	e79d      	b.n	800830a <__udivmoddi4+0xa2>
 80083ce:	4631      	mov	r1, r6
 80083d0:	4630      	mov	r0, r6
 80083d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d6:	f1ce 0420 	rsb	r4, lr, #32
 80083da:	fa05 f30e 	lsl.w	r3, r5, lr
 80083de:	fa07 f70e 	lsl.w	r7, r7, lr
 80083e2:	fa20 f804 	lsr.w	r8, r0, r4
 80083e6:	0c3a      	lsrs	r2, r7, #16
 80083e8:	fa25 f404 	lsr.w	r4, r5, r4
 80083ec:	ea48 0803 	orr.w	r8, r8, r3
 80083f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80083f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80083f8:	fb02 4411 	mls	r4, r2, r1, r4
 80083fc:	fa1f fc87 	uxth.w	ip, r7
 8008400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8008404:	fb01 f30c 	mul.w	r3, r1, ip
 8008408:	42ab      	cmp	r3, r5
 800840a:	fa00 f40e 	lsl.w	r4, r0, lr
 800840e:	d909      	bls.n	8008424 <__udivmoddi4+0x1bc>
 8008410:	19ed      	adds	r5, r5, r7
 8008412:	f101 30ff 	add.w	r0, r1, #4294967295
 8008416:	f080 808a 	bcs.w	800852e <__udivmoddi4+0x2c6>
 800841a:	42ab      	cmp	r3, r5
 800841c:	f240 8087 	bls.w	800852e <__udivmoddi4+0x2c6>
 8008420:	3902      	subs	r1, #2
 8008422:	443d      	add	r5, r7
 8008424:	1aeb      	subs	r3, r5, r3
 8008426:	fa1f f588 	uxth.w	r5, r8
 800842a:	fbb3 f0f2 	udiv	r0, r3, r2
 800842e:	fb02 3310 	mls	r3, r2, r0, r3
 8008432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8008436:	fb00 f30c 	mul.w	r3, r0, ip
 800843a:	42ab      	cmp	r3, r5
 800843c:	d907      	bls.n	800844e <__udivmoddi4+0x1e6>
 800843e:	19ed      	adds	r5, r5, r7
 8008440:	f100 38ff 	add.w	r8, r0, #4294967295
 8008444:	d26f      	bcs.n	8008526 <__udivmoddi4+0x2be>
 8008446:	42ab      	cmp	r3, r5
 8008448:	d96d      	bls.n	8008526 <__udivmoddi4+0x2be>
 800844a:	3802      	subs	r0, #2
 800844c:	443d      	add	r5, r7
 800844e:	1aeb      	subs	r3, r5, r3
 8008450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008454:	e78f      	b.n	8008376 <__udivmoddi4+0x10e>
 8008456:	f1c1 0720 	rsb	r7, r1, #32
 800845a:	fa22 f807 	lsr.w	r8, r2, r7
 800845e:	408b      	lsls	r3, r1
 8008460:	fa05 f401 	lsl.w	r4, r5, r1
 8008464:	ea48 0303 	orr.w	r3, r8, r3
 8008468:	fa20 fe07 	lsr.w	lr, r0, r7
 800846c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008470:	40fd      	lsrs	r5, r7
 8008472:	ea4e 0e04 	orr.w	lr, lr, r4
 8008476:	fbb5 f9fc 	udiv	r9, r5, ip
 800847a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800847e:	fb0c 5519 	mls	r5, ip, r9, r5
 8008482:	fa1f f883 	uxth.w	r8, r3
 8008486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800848a:	fb09 f408 	mul.w	r4, r9, r8
 800848e:	42ac      	cmp	r4, r5
 8008490:	fa02 f201 	lsl.w	r2, r2, r1
 8008494:	fa00 fa01 	lsl.w	sl, r0, r1
 8008498:	d908      	bls.n	80084ac <__udivmoddi4+0x244>
 800849a:	18ed      	adds	r5, r5, r3
 800849c:	f109 30ff 	add.w	r0, r9, #4294967295
 80084a0:	d243      	bcs.n	800852a <__udivmoddi4+0x2c2>
 80084a2:	42ac      	cmp	r4, r5
 80084a4:	d941      	bls.n	800852a <__udivmoddi4+0x2c2>
 80084a6:	f1a9 0902 	sub.w	r9, r9, #2
 80084aa:	441d      	add	r5, r3
 80084ac:	1b2d      	subs	r5, r5, r4
 80084ae:	fa1f fe8e 	uxth.w	lr, lr
 80084b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80084b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80084ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80084be:	fb00 f808 	mul.w	r8, r0, r8
 80084c2:	45a0      	cmp	r8, r4
 80084c4:	d907      	bls.n	80084d6 <__udivmoddi4+0x26e>
 80084c6:	18e4      	adds	r4, r4, r3
 80084c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80084cc:	d229      	bcs.n	8008522 <__udivmoddi4+0x2ba>
 80084ce:	45a0      	cmp	r8, r4
 80084d0:	d927      	bls.n	8008522 <__udivmoddi4+0x2ba>
 80084d2:	3802      	subs	r0, #2
 80084d4:	441c      	add	r4, r3
 80084d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80084da:	eba4 0408 	sub.w	r4, r4, r8
 80084de:	fba0 8902 	umull	r8, r9, r0, r2
 80084e2:	454c      	cmp	r4, r9
 80084e4:	46c6      	mov	lr, r8
 80084e6:	464d      	mov	r5, r9
 80084e8:	d315      	bcc.n	8008516 <__udivmoddi4+0x2ae>
 80084ea:	d012      	beq.n	8008512 <__udivmoddi4+0x2aa>
 80084ec:	b156      	cbz	r6, 8008504 <__udivmoddi4+0x29c>
 80084ee:	ebba 030e 	subs.w	r3, sl, lr
 80084f2:	eb64 0405 	sbc.w	r4, r4, r5
 80084f6:	fa04 f707 	lsl.w	r7, r4, r7
 80084fa:	40cb      	lsrs	r3, r1
 80084fc:	431f      	orrs	r7, r3
 80084fe:	40cc      	lsrs	r4, r1
 8008500:	6037      	str	r7, [r6, #0]
 8008502:	6074      	str	r4, [r6, #4]
 8008504:	2100      	movs	r1, #0
 8008506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800850a:	4618      	mov	r0, r3
 800850c:	e6f8      	b.n	8008300 <__udivmoddi4+0x98>
 800850e:	4690      	mov	r8, r2
 8008510:	e6e0      	b.n	80082d4 <__udivmoddi4+0x6c>
 8008512:	45c2      	cmp	sl, r8
 8008514:	d2ea      	bcs.n	80084ec <__udivmoddi4+0x284>
 8008516:	ebb8 0e02 	subs.w	lr, r8, r2
 800851a:	eb69 0503 	sbc.w	r5, r9, r3
 800851e:	3801      	subs	r0, #1
 8008520:	e7e4      	b.n	80084ec <__udivmoddi4+0x284>
 8008522:	4628      	mov	r0, r5
 8008524:	e7d7      	b.n	80084d6 <__udivmoddi4+0x26e>
 8008526:	4640      	mov	r0, r8
 8008528:	e791      	b.n	800844e <__udivmoddi4+0x1e6>
 800852a:	4681      	mov	r9, r0
 800852c:	e7be      	b.n	80084ac <__udivmoddi4+0x244>
 800852e:	4601      	mov	r1, r0
 8008530:	e778      	b.n	8008424 <__udivmoddi4+0x1bc>
 8008532:	3802      	subs	r0, #2
 8008534:	443c      	add	r4, r7
 8008536:	e745      	b.n	80083c4 <__udivmoddi4+0x15c>
 8008538:	4608      	mov	r0, r1
 800853a:	e708      	b.n	800834e <__udivmoddi4+0xe6>
 800853c:	f1a8 0802 	sub.w	r8, r8, #2
 8008540:	443d      	add	r5, r7
 8008542:	e72b      	b.n	800839c <__udivmoddi4+0x134>

08008544 <__aeabi_idiv0>:
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop

08008548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800854a:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <HAL_InitTick+0x3c>)
{
 800854c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800854e:	4a0e      	ldr	r2, [pc, #56]	; (8008588 <HAL_InitTick+0x40>)
 8008550:	7818      	ldrb	r0, [r3, #0]
 8008552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008556:	fbb3 f3f0 	udiv	r3, r3, r0
 800855a:	6810      	ldr	r0, [r2, #0]
 800855c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008560:	f000 f890 	bl	8008684 <HAL_SYSTICK_Config>
 8008564:	4604      	mov	r4, r0
 8008566:	b958      	cbnz	r0, 8008580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008568:	2d0f      	cmp	r5, #15
 800856a:	d809      	bhi.n	8008580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800856c:	4602      	mov	r2, r0
 800856e:	4629      	mov	r1, r5
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	f000 f84e 	bl	8008614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008578:	4b04      	ldr	r3, [pc, #16]	; (800858c <HAL_InitTick+0x44>)
 800857a:	4620      	mov	r0, r4
 800857c:	601d      	str	r5, [r3, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	20000000 	.word	0x20000000
 8008588:	20000008 	.word	0x20000008
 800858c:	20000004 	.word	0x20000004

08008590 <HAL_Init>:
{
 8008590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008592:	2003      	movs	r0, #3
 8008594:	f000 f82c 	bl	80085f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008598:	2000      	movs	r0, #0
 800859a:	f7ff ffd5 	bl	8008548 <HAL_InitTick>
  HAL_MspInit();
 800859e:	f001 f84f 	bl	8009640 <HAL_MspInit>
}
 80085a2:	2000      	movs	r0, #0
 80085a4:	bd08      	pop	{r3, pc}
	...

080085a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80085a8:	4a03      	ldr	r2, [pc, #12]	; (80085b8 <HAL_IncTick+0x10>)
 80085aa:	4b04      	ldr	r3, [pc, #16]	; (80085bc <HAL_IncTick+0x14>)
 80085ac:	6811      	ldr	r1, [r2, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	440b      	add	r3, r1
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	2000002c 	.word	0x2000002c
 80085bc:	20000000 	.word	0x20000000

080085c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80085c0:	4b01      	ldr	r3, [pc, #4]	; (80085c8 <HAL_GetTick+0x8>)
 80085c2:	6818      	ldr	r0, [r3, #0]
}
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	2000002c 	.word	0x2000002c

080085cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80085d0:	f7ff fff6 	bl	80085c0 <HAL_GetTick>
 80085d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80085d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80085d8:	bf1e      	ittt	ne
 80085da:	4b04      	ldrne	r3, [pc, #16]	; (80085ec <HAL_Delay+0x20>)
 80085dc:	781b      	ldrbne	r3, [r3, #0]
 80085de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80085e0:	f7ff ffee 	bl	80085c0 <HAL_GetTick>
 80085e4:	1b40      	subs	r0, r0, r5
 80085e6:	4284      	cmp	r4, r0
 80085e8:	d8fa      	bhi.n	80085e0 <HAL_Delay+0x14>
  {
  }
}
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20000000 	.word	0x20000000

080085f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085f0:	4a07      	ldr	r2, [pc, #28]	; (8008610 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80085f2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085f4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80085f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80085fe:	041b      	lsls	r3, r3, #16
 8008600:	0c1b      	lsrs	r3, r3, #16
 8008602:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800860a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800860c:	60d3      	str	r3, [r2, #12]
 800860e:	4770      	bx	lr
 8008610:	e000ed00 	.word	0xe000ed00

08008614 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008614:	4b19      	ldr	r3, [pc, #100]	; (800867c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008616:	b530      	push	{r4, r5, lr}
 8008618:	68dc      	ldr	r4, [r3, #12]
 800861a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800861e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008622:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008624:	2b04      	cmp	r3, #4
 8008626:	bf28      	it	cs
 8008628:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800862a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800862c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008630:	bf8c      	ite	hi
 8008632:	3c03      	subhi	r4, #3
 8008634:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008636:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800863a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800863c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008640:	ea01 0103 	and.w	r1, r1, r3
 8008644:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008648:	fa05 f404 	lsl.w	r4, r5, r4
 800864c:	f104 34ff 	add.w	r4, r4, #4294967295
 8008650:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008654:	ea42 0201 	orr.w	r2, r2, r1
 8008658:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800865c:	da05      	bge.n	800866a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800865e:	f000 000f 	and.w	r0, r0, #15
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	4b06      	ldr	r3, [pc, #24]	; (8008680 <HAL_NVIC_SetPriority+0x6c>)
 8008666:	541a      	strb	r2, [r3, r0]
 8008668:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800866a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800866e:	b2d2      	uxtb	r2, r2
 8008670:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8008674:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8008678:	bd30      	pop	{r4, r5, pc}
 800867a:	bf00      	nop
 800867c:	e000ed00 	.word	0xe000ed00
 8008680:	e000ed14 	.word	0xe000ed14

08008684 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008684:	3801      	subs	r0, #1
 8008686:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800868a:	d20a      	bcs.n	80086a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800868e:	21f0      	movs	r1, #240	; 0xf0
 8008690:	4a06      	ldr	r2, [pc, #24]	; (80086ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008692:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008694:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008696:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800869a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800869c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80086a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	e000e010 	.word	0xe000e010
 80086ac:	e000ed00 	.word	0xe000ed00

080086b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80086b0:	4b04      	ldr	r3, [pc, #16]	; (80086c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80086b2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	bf0c      	ite	eq
 80086b8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80086bc:	f022 0204 	bicne.w	r2, r2, #4
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	4770      	bx	lr
 80086c4:	e000e010 	.word	0xe000e010

080086c8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80086c8:	4770      	bx	lr

080086ca <HAL_SYSTICK_IRQHandler>:
{
 80086ca:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80086cc:	f7ff fffc 	bl	80086c8 <HAL_SYSTICK_Callback>
 80086d0:	bd08      	pop	{r3, pc}
	...

080086d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086d8:	680b      	ldr	r3, [r1, #0]
{
 80086da:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80088a0 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086e0:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80086e2:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086e4:	4a6c      	ldr	r2, [pc, #432]	; (8008898 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80086e6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80088a4 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80086ea:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086ee:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80086f0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086f4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80086f8:	45b6      	cmp	lr, r6
 80086fa:	f040 80b3 	bne.w	8008864 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086fe:	684c      	ldr	r4, [r1, #4]
 8008700:	f024 0710 	bic.w	r7, r4, #16
 8008704:	2f02      	cmp	r7, #2
 8008706:	d116      	bne.n	8008736 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8008708:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800870c:	f003 0b07 	and.w	fp, r3, #7
 8008710:	f04f 0c0f 	mov.w	ip, #15
 8008714:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8008718:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800871c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008720:	fa0c fc0b 	lsl.w	ip, ip, fp
 8008724:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008728:	690d      	ldr	r5, [r1, #16]
 800872a:	fa05 f50b 	lsl.w	r5, r5, fp
 800872e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8008732:	f8ca 5020 	str.w	r5, [sl, #32]
 8008736:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800873a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800873c:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008740:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008744:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008748:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800874a:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800874e:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008750:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008752:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008756:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800875a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800875e:	d811      	bhi.n	8008784 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8008760:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008762:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8008766:	68cf      	ldr	r7, [r1, #12]
 8008768:	fa07 fc0a 	lsl.w	ip, r7, sl
 800876c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8008770:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008772:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008774:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008778:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800877c:	409f      	lsls	r7, r3
 800877e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8008782:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8008784:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008786:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008788:	688f      	ldr	r7, [r1, #8]
 800878a:	fa07 f70a 	lsl.w	r7, r7, sl
 800878e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8008790:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008792:	00e5      	lsls	r5, r4, #3
 8008794:	d566      	bpl.n	8008864 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008796:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800879a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800879e:	f003 0e03 	and.w	lr, r3, #3
 80087a2:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087a6:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80087aa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80087ae:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087b2:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80087b6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80087ba:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80087be:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80087c2:	9503      	str	r5, [sp, #12]
 80087c4:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80087c6:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80087ca:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80087ce:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80087d2:	4d32      	ldr	r5, [pc, #200]	; (800889c <HAL_GPIO_Init+0x1c8>)
 80087d4:	42a8      	cmp	r0, r5
 80087d6:	d04c      	beq.n	8008872 <HAL_GPIO_Init+0x19e>
 80087d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087dc:	42a8      	cmp	r0, r5
 80087de:	d04a      	beq.n	8008876 <HAL_GPIO_Init+0x1a2>
 80087e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087e4:	42a8      	cmp	r0, r5
 80087e6:	d048      	beq.n	800887a <HAL_GPIO_Init+0x1a6>
 80087e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087ec:	42a8      	cmp	r0, r5
 80087ee:	d046      	beq.n	800887e <HAL_GPIO_Init+0x1aa>
 80087f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087f4:	42a8      	cmp	r0, r5
 80087f6:	d044      	beq.n	8008882 <HAL_GPIO_Init+0x1ae>
 80087f8:	4548      	cmp	r0, r9
 80087fa:	d044      	beq.n	8008886 <HAL_GPIO_Init+0x1b2>
 80087fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008800:	42a8      	cmp	r0, r5
 8008802:	d042      	beq.n	800888a <HAL_GPIO_Init+0x1b6>
 8008804:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008808:	42a8      	cmp	r0, r5
 800880a:	d040      	beq.n	800888e <HAL_GPIO_Init+0x1ba>
 800880c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008810:	42a8      	cmp	r0, r5
 8008812:	d03e      	beq.n	8008892 <HAL_GPIO_Init+0x1be>
 8008814:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008818:	42a8      	cmp	r0, r5
 800881a:	bf14      	ite	ne
 800881c:	250a      	movne	r5, #10
 800881e:	2509      	moveq	r5, #9
 8008820:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008824:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008828:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800882c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800882e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8008832:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8008834:	bf0c      	ite	eq
 8008836:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8008838:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800883a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800883e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8008840:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8008842:	bf0c      	ite	eq
 8008844:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8008846:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008848:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800884c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800884e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8008850:	bf0c      	ite	eq
 8008852:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8008854:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008856:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8008858:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800885a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800885c:	bf54      	ite	pl
 800885e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8008860:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8008862:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008864:	3301      	adds	r3, #1
 8008866:	2b10      	cmp	r3, #16
 8008868:	f47f af3f 	bne.w	80086ea <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800886c:	b005      	add	sp, #20
 800886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008872:	2500      	movs	r5, #0
 8008874:	e7d4      	b.n	8008820 <HAL_GPIO_Init+0x14c>
 8008876:	2501      	movs	r5, #1
 8008878:	e7d2      	b.n	8008820 <HAL_GPIO_Init+0x14c>
 800887a:	2502      	movs	r5, #2
 800887c:	e7d0      	b.n	8008820 <HAL_GPIO_Init+0x14c>
 800887e:	2503      	movs	r5, #3
 8008880:	e7ce      	b.n	8008820 <HAL_GPIO_Init+0x14c>
 8008882:	2504      	movs	r5, #4
 8008884:	e7cc      	b.n	8008820 <HAL_GPIO_Init+0x14c>
 8008886:	2505      	movs	r5, #5
 8008888:	e7ca      	b.n	8008820 <HAL_GPIO_Init+0x14c>
 800888a:	2506      	movs	r5, #6
 800888c:	e7c8      	b.n	8008820 <HAL_GPIO_Init+0x14c>
 800888e:	2507      	movs	r5, #7
 8008890:	e7c6      	b.n	8008820 <HAL_GPIO_Init+0x14c>
 8008892:	2508      	movs	r5, #8
 8008894:	e7c4      	b.n	8008820 <HAL_GPIO_Init+0x14c>
 8008896:	bf00      	nop
 8008898:	40013c00 	.word	0x40013c00
 800889c:	40020000 	.word	0x40020000
 80088a0:	40023800 	.word	0x40023800
 80088a4:	40021400 	.word	0x40021400

080088a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088a8:	b10a      	cbz	r2, 80088ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80088aa:	6181      	str	r1, [r0, #24]
 80088ac:	4770      	bx	lr
 80088ae:	0409      	lsls	r1, r1, #16
 80088b0:	e7fb      	b.n	80088aa <HAL_GPIO_WritePin+0x2>

080088b2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80088b2:	6943      	ldr	r3, [r0, #20]
 80088b4:	4059      	eors	r1, r3
 80088b6:	6141      	str	r1, [r0, #20]
 80088b8:	4770      	bx	lr
	...

080088bc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80088bc:	4b19      	ldr	r3, [pc, #100]	; (8008924 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80088be:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80088c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80088c2:	4c19      	ldr	r4, [pc, #100]	; (8008928 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80088c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80088c8:	641a      	str	r2, [r3, #64]	; 0x40
 80088ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088d0:	9301      	str	r3, [sp, #4]
 80088d2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088da:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088dc:	f7ff fe70 	bl	80085c0 <HAL_GetTick>
 80088e0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80088e2:	6863      	ldr	r3, [r4, #4]
 80088e4:	03da      	lsls	r2, r3, #15
 80088e6:	d50c      	bpl.n	8008902 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ee:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088f0:	f7ff fe66 	bl	80085c0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80088f4:	4c0c      	ldr	r4, [pc, #48]	; (8008928 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80088f6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80088f8:	6863      	ldr	r3, [r4, #4]
 80088fa:	039b      	lsls	r3, r3, #14
 80088fc:	d50a      	bpl.n	8008914 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80088fe:	2000      	movs	r0, #0
 8008900:	e006      	b.n	8008910 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008902:	f7ff fe5d 	bl	80085c0 <HAL_GetTick>
 8008906:	1b40      	subs	r0, r0, r5
 8008908:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800890c:	d9e9      	bls.n	80088e2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800890e:	2003      	movs	r0, #3
}
 8008910:	b003      	add	sp, #12
 8008912:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008914:	f7ff fe54 	bl	80085c0 <HAL_GetTick>
 8008918:	1b40      	subs	r0, r0, r5
 800891a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800891e:	d9eb      	bls.n	80088f8 <HAL_PWREx_EnableOverDrive+0x3c>
 8008920:	e7f5      	b.n	800890e <HAL_PWREx_EnableOverDrive+0x52>
 8008922:	bf00      	nop
 8008924:	40023800 	.word	0x40023800
 8008928:	40007000 	.word	0x40007000

0800892c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800892c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008930:	4604      	mov	r4, r0
 8008932:	b918      	cbnz	r0, 800893c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8008934:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8008936:	b002      	add	sp, #8
 8008938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800893c:	6803      	ldr	r3, [r0, #0]
 800893e:	07d8      	lsls	r0, r3, #31
 8008940:	d410      	bmi.n	8008964 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	0799      	lsls	r1, r3, #30
 8008946:	d45e      	bmi.n	8008a06 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	0719      	lsls	r1, r3, #28
 800894c:	f100 80a3 	bmi.w	8008a96 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	075a      	lsls	r2, r3, #29
 8008954:	f100 80c4 	bmi.w	8008ae0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008958:	69a2      	ldr	r2, [r4, #24]
 800895a:	2a00      	cmp	r2, #0
 800895c:	f040 812e 	bne.w	8008bbc <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8008960:	2000      	movs	r0, #0
 8008962:	e7e8      	b.n	8008936 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008964:	4b93      	ldr	r3, [pc, #588]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	f002 020c 	and.w	r2, r2, #12
 800896c:	2a04      	cmp	r2, #4
 800896e:	d007      	beq.n	8008980 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	f002 020c 	and.w	r2, r2, #12
 8008976:	2a08      	cmp	r2, #8
 8008978:	d10a      	bne.n	8008990 <HAL_RCC_OscConfig+0x64>
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	025a      	lsls	r2, r3, #9
 800897e:	d507      	bpl.n	8008990 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008980:	4b8c      	ldr	r3, [pc, #560]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	039b      	lsls	r3, r3, #14
 8008986:	d5dc      	bpl.n	8008942 <HAL_RCC_OscConfig+0x16>
 8008988:	6863      	ldr	r3, [r4, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1d9      	bne.n	8008942 <HAL_RCC_OscConfig+0x16>
 800898e:	e7d1      	b.n	8008934 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008990:	6863      	ldr	r3, [r4, #4]
 8008992:	4d88      	ldr	r5, [pc, #544]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
 8008994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008998:	d111      	bne.n	80089be <HAL_RCC_OscConfig+0x92>
 800899a:	682b      	ldr	r3, [r5, #0]
 800899c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80089a2:	f7ff fe0d 	bl	80085c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089a6:	4d83      	ldr	r5, [pc, #524]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80089a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089aa:	682b      	ldr	r3, [r5, #0]
 80089ac:	039f      	lsls	r7, r3, #14
 80089ae:	d4c8      	bmi.n	8008942 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089b0:	f7ff fe06 	bl	80085c0 <HAL_GetTick>
 80089b4:	1b80      	subs	r0, r0, r6
 80089b6:	2864      	cmp	r0, #100	; 0x64
 80089b8:	d9f7      	bls.n	80089aa <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80089ba:	2003      	movs	r0, #3
 80089bc:	e7bb      	b.n	8008936 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089be:	b99b      	cbnz	r3, 80089e8 <HAL_RCC_OscConfig+0xbc>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089c6:	602b      	str	r3, [r5, #0]
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80089d0:	f7ff fdf6 	bl	80085c0 <HAL_GetTick>
 80089d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089d6:	682b      	ldr	r3, [r5, #0]
 80089d8:	0398      	lsls	r0, r3, #14
 80089da:	d5b2      	bpl.n	8008942 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089dc:	f7ff fdf0 	bl	80085c0 <HAL_GetTick>
 80089e0:	1b80      	subs	r0, r0, r6
 80089e2:	2864      	cmp	r0, #100	; 0x64
 80089e4:	d9f7      	bls.n	80089d6 <HAL_RCC_OscConfig+0xaa>
 80089e6:	e7e8      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	d103      	bne.n	80089f8 <HAL_RCC_OscConfig+0xcc>
 80089f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	e7d0      	b.n	800899a <HAL_RCC_OscConfig+0x6e>
 80089f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	682b      	ldr	r3, [r5, #0]
 8008a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a04:	e7cc      	b.n	80089a0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a06:	4b6b      	ldr	r3, [pc, #428]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
 8008a08:	689a      	ldr	r2, [r3, #8]
 8008a0a:	f012 0f0c 	tst.w	r2, #12
 8008a0e:	d007      	beq.n	8008a20 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	f002 020c 	and.w	r2, r2, #12
 8008a16:	2a08      	cmp	r2, #8
 8008a18:	d111      	bne.n	8008a3e <HAL_RCC_OscConfig+0x112>
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	0259      	lsls	r1, r3, #9
 8008a1e:	d40e      	bmi.n	8008a3e <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a20:	4b64      	ldr	r3, [pc, #400]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	0792      	lsls	r2, r2, #30
 8008a26:	d502      	bpl.n	8008a2e <HAL_RCC_OscConfig+0x102>
 8008a28:	68e2      	ldr	r2, [r4, #12]
 8008a2a:	2a01      	cmp	r2, #1
 8008a2c:	d182      	bne.n	8008934 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	6921      	ldr	r1, [r4, #16]
 8008a32:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008a36:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8008a3a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a3c:	e784      	b.n	8008948 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a3e:	68e3      	ldr	r3, [r4, #12]
 8008a40:	4d5c      	ldr	r5, [pc, #368]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
 8008a42:	b1bb      	cbz	r3, 8008a74 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	f043 0301 	orr.w	r3, r3, #1
 8008a4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008a4c:	f7ff fdb8 	bl	80085c0 <HAL_GetTick>
 8008a50:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a52:	682b      	ldr	r3, [r5, #0]
 8008a54:	079f      	lsls	r7, r3, #30
 8008a56:	d507      	bpl.n	8008a68 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	6922      	ldr	r2, [r4, #16]
 8008a5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008a60:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	e76f      	b.n	8008948 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a68:	f7ff fdaa 	bl	80085c0 <HAL_GetTick>
 8008a6c:	1b80      	subs	r0, r0, r6
 8008a6e:	2802      	cmp	r0, #2
 8008a70:	d9ef      	bls.n	8008a52 <HAL_RCC_OscConfig+0x126>
 8008a72:	e7a2      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	f023 0301 	bic.w	r3, r3, #1
 8008a7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008a7c:	f7ff fda0 	bl	80085c0 <HAL_GetTick>
 8008a80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a82:	682b      	ldr	r3, [r5, #0]
 8008a84:	0798      	lsls	r0, r3, #30
 8008a86:	f57f af5f 	bpl.w	8008948 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a8a:	f7ff fd99 	bl	80085c0 <HAL_GetTick>
 8008a8e:	1b80      	subs	r0, r0, r6
 8008a90:	2802      	cmp	r0, #2
 8008a92:	d9f6      	bls.n	8008a82 <HAL_RCC_OscConfig+0x156>
 8008a94:	e791      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a96:	6963      	ldr	r3, [r4, #20]
 8008a98:	4d46      	ldr	r5, [pc, #280]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
 8008a9a:	b183      	cbz	r3, 8008abe <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8008a9c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008a9e:	f043 0301 	orr.w	r3, r3, #1
 8008aa2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008aa4:	f7ff fd8c 	bl	80085c0 <HAL_GetTick>
 8008aa8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008aaa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008aac:	079b      	lsls	r3, r3, #30
 8008aae:	f53f af4f 	bmi.w	8008950 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ab2:	f7ff fd85 	bl	80085c0 <HAL_GetTick>
 8008ab6:	1b80      	subs	r0, r0, r6
 8008ab8:	2802      	cmp	r0, #2
 8008aba:	d9f6      	bls.n	8008aaa <HAL_RCC_OscConfig+0x17e>
 8008abc:	e77d      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8008abe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008ac0:	f023 0301 	bic.w	r3, r3, #1
 8008ac4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008ac6:	f7ff fd7b 	bl	80085c0 <HAL_GetTick>
 8008aca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008acc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008ace:	079f      	lsls	r7, r3, #30
 8008ad0:	f57f af3e 	bpl.w	8008950 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ad4:	f7ff fd74 	bl	80085c0 <HAL_GetTick>
 8008ad8:	1b80      	subs	r0, r0, r6
 8008ada:	2802      	cmp	r0, #2
 8008adc:	d9f6      	bls.n	8008acc <HAL_RCC_OscConfig+0x1a0>
 8008ade:	e76c      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ae0:	4b34      	ldr	r3, [pc, #208]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
 8008ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ae4:	00d0      	lsls	r0, r2, #3
 8008ae6:	d427      	bmi.n	8008b38 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8008aea:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008aec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008af0:	641a      	str	r2, [r3, #64]	; 0x40
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008afc:	4d2e      	ldr	r5, [pc, #184]	; (8008bb8 <HAL_RCC_OscConfig+0x28c>)
 8008afe:	682b      	ldr	r3, [r5, #0]
 8008b00:	05d9      	lsls	r1, r3, #23
 8008b02:	d51b      	bpl.n	8008b3c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b04:	68a3      	ldr	r3, [r4, #8]
 8008b06:	4d2b      	ldr	r5, [pc, #172]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d127      	bne.n	8008b5c <HAL_RCC_OscConfig+0x230>
 8008b0c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b14:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008b18:	f7ff fd52 	bl	80085c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b1c:	4f25      	ldr	r7, [pc, #148]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8008b1e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b22:	079b      	lsls	r3, r3, #30
 8008b24:	d53f      	bpl.n	8008ba6 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8008b26:	2e00      	cmp	r6, #0
 8008b28:	f43f af16 	beq.w	8008958 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b2c:	4a21      	ldr	r2, [pc, #132]	; (8008bb4 <HAL_RCC_OscConfig+0x288>)
 8008b2e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b34:	6413      	str	r3, [r2, #64]	; 0x40
 8008b36:	e70f      	b.n	8008958 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8008b38:	2600      	movs	r6, #0
 8008b3a:	e7df      	b.n	8008afc <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b42:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008b44:	f7ff fd3c 	bl	80085c0 <HAL_GetTick>
 8008b48:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b4a:	682b      	ldr	r3, [r5, #0]
 8008b4c:	05da      	lsls	r2, r3, #23
 8008b4e:	d4d9      	bmi.n	8008b04 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b50:	f7ff fd36 	bl	80085c0 <HAL_GetTick>
 8008b54:	1bc0      	subs	r0, r0, r7
 8008b56:	2864      	cmp	r0, #100	; 0x64
 8008b58:	d9f7      	bls.n	8008b4a <HAL_RCC_OscConfig+0x21e>
 8008b5a:	e72e      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b5c:	b9ab      	cbnz	r3, 8008b8a <HAL_RCC_OscConfig+0x25e>
 8008b5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b60:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b64:	f023 0301 	bic.w	r3, r3, #1
 8008b68:	672b      	str	r3, [r5, #112]	; 0x70
 8008b6a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008b6c:	f023 0304 	bic.w	r3, r3, #4
 8008b70:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008b72:	f7ff fd25 	bl	80085c0 <HAL_GetTick>
 8008b76:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008b7a:	0798      	lsls	r0, r3, #30
 8008b7c:	d5d3      	bpl.n	8008b26 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b7e:	f7ff fd1f 	bl	80085c0 <HAL_GetTick>
 8008b82:	1bc0      	subs	r0, r0, r7
 8008b84:	4540      	cmp	r0, r8
 8008b86:	d9f7      	bls.n	8008b78 <HAL_RCC_OscConfig+0x24c>
 8008b88:	e717      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b8a:	2b05      	cmp	r3, #5
 8008b8c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008b8e:	d103      	bne.n	8008b98 <HAL_RCC_OscConfig+0x26c>
 8008b90:	f043 0304 	orr.w	r3, r3, #4
 8008b94:	672b      	str	r3, [r5, #112]	; 0x70
 8008b96:	e7b9      	b.n	8008b0c <HAL_RCC_OscConfig+0x1e0>
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	672b      	str	r3, [r5, #112]	; 0x70
 8008b9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008ba0:	f023 0304 	bic.w	r3, r3, #4
 8008ba4:	e7b5      	b.n	8008b12 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ba6:	f7ff fd0b 	bl	80085c0 <HAL_GetTick>
 8008baa:	eba0 0008 	sub.w	r0, r0, r8
 8008bae:	42a8      	cmp	r0, r5
 8008bb0:	d9b6      	bls.n	8008b20 <HAL_RCC_OscConfig+0x1f4>
 8008bb2:	e702      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
 8008bb4:	40023800 	.word	0x40023800
 8008bb8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bbc:	4d24      	ldr	r5, [pc, #144]	; (8008c50 <HAL_RCC_OscConfig+0x324>)
 8008bbe:	68ab      	ldr	r3, [r5, #8]
 8008bc0:	f003 030c 	and.w	r3, r3, #12
 8008bc4:	2b08      	cmp	r3, #8
 8008bc6:	f43f aeb5 	beq.w	8008934 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8008bca:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bcc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8008bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bd2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bd4:	d12f      	bne.n	8008c36 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8008bd6:	f7ff fcf3 	bl	80085c0 <HAL_GetTick>
 8008bda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	0199      	lsls	r1, r3, #6
 8008be0:	d423      	bmi.n	8008c2a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008be2:	6a22      	ldr	r2, [r4, #32]
 8008be4:	69e3      	ldr	r3, [r4, #28]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008bea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008bee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008bf0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008bf4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008bf6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8008bfa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bfc:	4c14      	ldr	r4, [pc, #80]	; (8008c50 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bfe:	0852      	lsrs	r2, r2, #1
 8008c00:	3a01      	subs	r2, #1
 8008c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c06:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008c10:	f7ff fcd6 	bl	80085c0 <HAL_GetTick>
 8008c14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	019a      	lsls	r2, r3, #6
 8008c1a:	f53f aea1 	bmi.w	8008960 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c1e:	f7ff fccf 	bl	80085c0 <HAL_GetTick>
 8008c22:	1b40      	subs	r0, r0, r5
 8008c24:	2802      	cmp	r0, #2
 8008c26:	d9f6      	bls.n	8008c16 <HAL_RCC_OscConfig+0x2ea>
 8008c28:	e6c7      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c2a:	f7ff fcc9 	bl	80085c0 <HAL_GetTick>
 8008c2e:	1b80      	subs	r0, r0, r6
 8008c30:	2802      	cmp	r0, #2
 8008c32:	d9d3      	bls.n	8008bdc <HAL_RCC_OscConfig+0x2b0>
 8008c34:	e6c1      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8008c36:	f7ff fcc3 	bl	80085c0 <HAL_GetTick>
 8008c3a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	019b      	lsls	r3, r3, #6
 8008c40:	f57f ae8e 	bpl.w	8008960 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c44:	f7ff fcbc 	bl	80085c0 <HAL_GetTick>
 8008c48:	1b00      	subs	r0, r0, r4
 8008c4a:	2802      	cmp	r0, #2
 8008c4c:	d9f6      	bls.n	8008c3c <HAL_RCC_OscConfig+0x310>
 8008c4e:	e6b4      	b.n	80089ba <HAL_RCC_OscConfig+0x8e>
 8008c50:	40023800 	.word	0x40023800

08008c54 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c54:	4913      	ldr	r1, [pc, #76]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8008c56:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c58:	688b      	ldr	r3, [r1, #8]
 8008c5a:	f003 030c 	and.w	r3, r3, #12
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	d003      	beq.n	8008c6a <HAL_RCC_GetSysClockFreq+0x16>
 8008c62:	2b08      	cmp	r3, #8
 8008c64:	d003      	beq.n	8008c6e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c66:	4810      	ldr	r0, [pc, #64]	; (8008ca8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008c68:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8008c6a:	4810      	ldr	r0, [pc, #64]	; (8008cac <HAL_RCC_GetSysClockFreq+0x58>)
 8008c6c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c6e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008c70:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c72:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008c78:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c7c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8008c80:	bf1a      	itte	ne
 8008c82:	480a      	ldrne	r0, [pc, #40]	; (8008cac <HAL_RCC_GetSysClockFreq+0x58>)
 8008c84:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c86:	4808      	ldreq	r0, [pc, #32]	; (8008ca8 <HAL_RCC_GetSysClockFreq+0x54>)
 8008c88:	fba1 0100 	umull	r0, r1, r1, r0
 8008c8c:	f7ff fad4 	bl	8008238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8008c90:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x50>)
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8008c98:	3301      	adds	r3, #1
 8008c9a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8008c9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008ca0:	bd08      	pop	{r3, pc}
 8008ca2:	bf00      	nop
 8008ca4:	40023800 	.word	0x40023800
 8008ca8:	00f42400 	.word	0x00f42400
 8008cac:	017d7840 	.word	0x017d7840

08008cb0 <HAL_RCC_ClockConfig>:
{
 8008cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	b910      	cbnz	r0, 8008cc0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008cba:	2001      	movs	r0, #1
 8008cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cc0:	4a46      	ldr	r2, [pc, #280]	; (8008ddc <HAL_RCC_ClockConfig+0x12c>)
 8008cc2:	6813      	ldr	r3, [r2, #0]
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	428b      	cmp	r3, r1
 8008cca:	d328      	bcc.n	8008d1e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ccc:	6821      	ldr	r1, [r4, #0]
 8008cce:	078f      	lsls	r7, r1, #30
 8008cd0:	d430      	bmi.n	8008d34 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cd2:	07c8      	lsls	r0, r1, #31
 8008cd4:	d443      	bmi.n	8008d5e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cd6:	4a41      	ldr	r2, [pc, #260]	; (8008ddc <HAL_RCC_ClockConfig+0x12c>)
 8008cd8:	6813      	ldr	r3, [r2, #0]
 8008cda:	f003 030f 	and.w	r3, r3, #15
 8008cde:	429d      	cmp	r5, r3
 8008ce0:	d367      	bcc.n	8008db2 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ce2:	6822      	ldr	r2, [r4, #0]
 8008ce4:	0751      	lsls	r1, r2, #29
 8008ce6:	d470      	bmi.n	8008dca <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ce8:	0713      	lsls	r3, r2, #28
 8008cea:	d507      	bpl.n	8008cfc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008cec:	4a3c      	ldr	r2, [pc, #240]	; (8008de0 <HAL_RCC_ClockConfig+0x130>)
 8008cee:	6921      	ldr	r1, [r4, #16]
 8008cf0:	6893      	ldr	r3, [r2, #8]
 8008cf2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008cf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008cfa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cfc:	f7ff ffaa 	bl	8008c54 <HAL_RCC_GetSysClockFreq>
 8008d00:	4b37      	ldr	r3, [pc, #220]	; (8008de0 <HAL_RCC_ClockConfig+0x130>)
 8008d02:	4a38      	ldr	r2, [pc, #224]	; (8008de4 <HAL_RCC_ClockConfig+0x134>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008d0a:	5cd3      	ldrb	r3, [r2, r3]
 8008d0c:	40d8      	lsrs	r0, r3
 8008d0e:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <HAL_RCC_ClockConfig+0x138>)
 8008d10:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8008d12:	2000      	movs	r0, #0
 8008d14:	f7ff fc18 	bl	8008548 <HAL_InitTick>
  return HAL_OK;
 8008d18:	2000      	movs	r0, #0
 8008d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d1e:	6813      	ldr	r3, [r2, #0]
 8008d20:	f023 030f 	bic.w	r3, r3, #15
 8008d24:	430b      	orrs	r3, r1
 8008d26:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d28:	6813      	ldr	r3, [r2, #0]
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	d1c3      	bne.n	8008cba <HAL_RCC_ClockConfig+0xa>
 8008d32:	e7cb      	b.n	8008ccc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d34:	f011 0f04 	tst.w	r1, #4
 8008d38:	4b29      	ldr	r3, [pc, #164]	; (8008de0 <HAL_RCC_ClockConfig+0x130>)
 8008d3a:	d003      	beq.n	8008d44 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8008d42:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d44:	070e      	lsls	r6, r1, #28
 8008d46:	d503      	bpl.n	8008d50 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8008d4e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d50:	689a      	ldr	r2, [r3, #8]
 8008d52:	68a0      	ldr	r0, [r4, #8]
 8008d54:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008d58:	4302      	orrs	r2, r0
 8008d5a:	609a      	str	r2, [r3, #8]
 8008d5c:	e7b9      	b.n	8008cd2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d5e:	6861      	ldr	r1, [r4, #4]
 8008d60:	4b1f      	ldr	r3, [pc, #124]	; (8008de0 <HAL_RCC_ClockConfig+0x130>)
 8008d62:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d64:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d66:	d11c      	bne.n	8008da2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d68:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d6c:	d0a5      	beq.n	8008cba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d6e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d70:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d74:	4e1a      	ldr	r6, [pc, #104]	; (8008de0 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d76:	f022 0203 	bic.w	r2, r2, #3
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8008d7e:	f7ff fc1f 	bl	80085c0 <HAL_GetTick>
 8008d82:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d84:	68b3      	ldr	r3, [r6, #8]
 8008d86:	6862      	ldr	r2, [r4, #4]
 8008d88:	f003 030c 	and.w	r3, r3, #12
 8008d8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008d90:	d0a1      	beq.n	8008cd6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d92:	f7ff fc15 	bl	80085c0 <HAL_GetTick>
 8008d96:	1bc0      	subs	r0, r0, r7
 8008d98:	4540      	cmp	r0, r8
 8008d9a:	d9f3      	bls.n	8008d84 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8008d9c:	2003      	movs	r0, #3
}
 8008d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008da2:	2902      	cmp	r1, #2
 8008da4:	d102      	bne.n	8008dac <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008da6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008daa:	e7df      	b.n	8008d6c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dac:	f012 0f02 	tst.w	r2, #2
 8008db0:	e7dc      	b.n	8008d6c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008db2:	6813      	ldr	r3, [r2, #0]
 8008db4:	f023 030f 	bic.w	r3, r3, #15
 8008db8:	432b      	orrs	r3, r5
 8008dba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dbc:	6813      	ldr	r3, [r2, #0]
 8008dbe:	f003 030f 	and.w	r3, r3, #15
 8008dc2:	429d      	cmp	r5, r3
 8008dc4:	f47f af79 	bne.w	8008cba <HAL_RCC_ClockConfig+0xa>
 8008dc8:	e78b      	b.n	8008ce2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dca:	4905      	ldr	r1, [pc, #20]	; (8008de0 <HAL_RCC_ClockConfig+0x130>)
 8008dcc:	68e0      	ldr	r0, [r4, #12]
 8008dce:	688b      	ldr	r3, [r1, #8]
 8008dd0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008dd4:	4303      	orrs	r3, r0
 8008dd6:	608b      	str	r3, [r1, #8]
 8008dd8:	e786      	b.n	8008ce8 <HAL_RCC_ClockConfig+0x38>
 8008dda:	bf00      	nop
 8008ddc:	40023c00 	.word	0x40023c00
 8008de0:	40023800 	.word	0x40023800
 8008de4:	08009870 	.word	0x08009870
 8008de8:	20000008 	.word	0x20000008

08008dec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8008dec:	4b01      	ldr	r3, [pc, #4]	; (8008df4 <HAL_RCC_GetHCLKFreq+0x8>)
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20000008 	.word	0x20000008

08008df8 <LL_DMA_Init>:
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  *@retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Configuration)
{
  MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
 8008df8:	4b1f      	ldr	r3, [pc, #124]	; (8008e78 <LL_DMA_Init+0x80>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Stream, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8008dfa:	b570      	push	{r4, r5, r6, lr}
 8008dfc:	5c59      	ldrb	r1, [r3, r1]
   * - MemoryOrM2MDstIncMode:  DMA_SxCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_SxCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_SxCR_MSIZE[1:0] bits
   * - Priority:               DMA_SxCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8008dfe:	68d6      	ldr	r6, [r2, #12]
 8008e00:	6893      	ldr	r3, [r2, #8]
 8008e02:	1844      	adds	r4, r0, r1
 8008e04:	5845      	ldr	r5, [r0, r1]
 8008e06:	4333      	orrs	r3, r6
                        DMA_InitStruct->Mode                    | \
 8008e08:	6916      	ldr	r6, [r2, #16]
 8008e0a:	f425 355f 	bic.w	r5, r5, #228352	; 0x37c00
 8008e0e:	4333      	orrs	r3, r6
                        DMA_InitStruct->PeriphOrM2MSrcIncMode   | \
 8008e10:	6956      	ldr	r6, [r2, #20]
 8008e12:	f425 7578 	bic.w	r5, r5, #992	; 0x3e0
 8008e16:	4333      	orrs	r3, r6
                        DMA_InitStruct->MemoryOrM2MDstIncMode   | \
 8008e18:	6996      	ldr	r6, [r2, #24]
 8008e1a:	4333      	orrs	r3, r6
                        DMA_InitStruct->PeriphOrM2MSrcDataSize  | \
 8008e1c:	69d6      	ldr	r6, [r2, #28]
 8008e1e:	4333      	orrs	r3, r6
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8008e20:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8008e22:	4333      	orrs	r3, r6
 8008e24:	432b      	orrs	r3, r5
 8008e26:	5043      	str	r3, [r0, r1]
                        DMA_InitStruct->MemoryOrM2MDstDataSize  | \
                        DMA_InitStruct->Priority
                        );

  if(DMA_InitStruct->FIFOMode != LL_DMA_FIFOMODE_DISABLE)
 8008e28:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e2a:	b193      	cbz	r3, 8008e52 <LL_DMA_Init+0x5a>
  *         @arg @ref LL_DMA_FIFOTHRESHOLD_FULL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigFifo(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t FifoMode, uint32_t FifoThreshold)
{
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH|DMA_SxFCR_DMDIS, FifoMode|FifoThreshold);
 8008e2c:	6965      	ldr	r5, [r4, #20]
 8008e2e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8008e30:	f025 0507 	bic.w	r5, r5, #7
 8008e34:	4333      	orrs	r3, r6
 8008e36:	432b      	orrs	r3, r5
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8008e38:	6b55      	ldr	r5, [r2, #52]	; 0x34
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH|DMA_SxFCR_DMDIS, FifoMode|FifoThreshold);
 8008e3a:	6163      	str	r3, [r4, #20]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8008e3c:	5843      	ldr	r3, [r0, r1]
 8008e3e:	f023 73c0 	bic.w	r3, r3, #25165824	; 0x1800000
 8008e42:	432b      	orrs	r3, r5
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 8008e44:	6b95      	ldr	r5, [r2, #56]	; 0x38
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8008e46:	5043      	str	r3, [r0, r1]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 8008e48:	5843      	ldr	r3, [r0, r1]
 8008e4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008e4e:	432b      	orrs	r3, r5
 8008e50:	5043      	str	r3, [r0, r1]

  /*-------------------------- DMAx SxM0AR Configuration --------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress:     DMA_SxM0AR_M0A[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Stream, DMA_InitStruct->MemoryOrM2MDstAddress);
 8008e52:	6853      	ldr	r3, [r2, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8008e54:	6a15      	ldr	r5, [r2, #32]
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8008e56:	60e3      	str	r3, [r4, #12]

  /*-------------------------- DMAx SxPAR Configuration ---------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress:     DMA_SxPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Stream, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8008e58:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8008e5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8008e5c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8008e5e:	6863      	ldr	r3, [r4, #4]
 8008e60:	0c1b      	lsrs	r3, r3, #16
 8008e62:	041b      	lsls	r3, r3, #16
 8008e64:	432b      	orrs	r3, r5
 8008e66:	6063      	str	r3, [r4, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8008e68:	5843      	ldr	r3, [r0, r1]
 8008e6a:	f023 53f0 	bic.w	r3, r3, #503316480	; 0x1e000000
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	5043      	str	r3, [r0, r1]
   * - PeriphRequest:             DMA_SxCR_CHSEL[3:0] bits
   */
  LL_DMA_SetChannelSelection(DMAx, Stream, DMA_InitStruct->Channel);

  return SUCCESS;
}
 8008e72:	2001      	movs	r0, #1
 8008e74:	bd70      	pop	{r4, r5, r6, pc}
 8008e76:	bf00      	nop
 8008e78:	08009868 	.word	0x08009868

08008e7c <LL_DMA_StructInit>:
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	6003      	str	r3, [r0, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 8008e80:	6043      	str	r3, [r0, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8008e82:	6083      	str	r3, [r0, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 8008e84:	60c3      	str	r3, [r0, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 8008e86:	6103      	str	r3, [r0, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8008e88:	6143      	str	r3, [r0, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8008e8a:	6183      	str	r3, [r0, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8008e8c:	61c3      	str	r3, [r0, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 8008e8e:	6203      	str	r3, [r0, #32]
  DMA_InitStruct->Channel                = LL_DMA_CHANNEL_0;
 8008e90:	6243      	str	r3, [r0, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8008e92:	6283      	str	r3, [r0, #40]	; 0x28
  DMA_InitStruct->FIFOMode               = LL_DMA_FIFOMODE_DISABLE;
 8008e94:	62c3      	str	r3, [r0, #44]	; 0x2c
  DMA_InitStruct->FIFOThreshold          = LL_DMA_FIFOTHRESHOLD_1_4;
 8008e96:	6303      	str	r3, [r0, #48]	; 0x30
  DMA_InitStruct->MemBurst               = LL_DMA_MBURST_SINGLE;
 8008e98:	6343      	str	r3, [r0, #52]	; 0x34
  DMA_InitStruct->PeriphBurst            = LL_DMA_PBURST_SINGLE;
 8008e9a:	6383      	str	r3, [r0, #56]	; 0x38
 8008e9c:	4770      	bx	lr

08008e9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008e9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008ea2:	680a      	ldr	r2, [r1, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ea4:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8008ea8:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008eac:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008eb0:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008eb2:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008eb4:	fa32 f304 	lsrs.w	r3, r2, r4
 8008eb8:	d10d      	bne.n	8008ed6 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008eba:	684b      	ldr	r3, [r1, #4]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d806      	bhi.n	8008ed0 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008ec2:	6843      	ldr	r3, [r0, #4]
 8008ec4:	68c9      	ldr	r1, [r1, #12]
 8008ec6:	ea23 0302 	bic.w	r3, r3, r2
 8008eca:	434a      	muls	r2, r1
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8008ed6:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8008eda:	4013      	ands	r3, r2
 8008edc:	d069      	beq.n	8008fb2 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008ede:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008ee2:	f8d0 9000 	ldr.w	r9, [r0]
 8008ee6:	fa93 fca3 	rbit	ip, r3
 8008eea:	fabc fc8c 	clz	ip, ip
 8008eee:	fa93 f6a3 	rbit	r6, r3
 8008ef2:	fab6 f686 	clz	r6, r6
 8008ef6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008efa:	0076      	lsls	r6, r6, #1
 8008efc:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008f00:	fa08 f606 	lsl.w	r6, r8, r6
 8008f04:	ea29 0c0c 	bic.w	ip, r9, ip
 8008f08:	ea4c 0606 	orr.w	r6, ip, r6
 8008f0c:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008f0e:	f108 36ff 	add.w	r6, r8, #4294967295
 8008f12:	2e01      	cmp	r6, #1
 8008f14:	d816      	bhi.n	8008f44 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008f16:	6886      	ldr	r6, [r0, #8]
 8008f18:	fa93 fca3 	rbit	ip, r3
 8008f1c:	fabc fc8c 	clz	ip, ip
 8008f20:	fa93 f9a3 	rbit	r9, r3
 8008f24:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008f28:	fab9 f989 	clz	r9, r9
 8008f2c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008f30:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008f34:	ea26 0c0c 	bic.w	ip, r6, ip
 8008f38:	688e      	ldr	r6, [r1, #8]
 8008f3a:	fa06 f609 	lsl.w	r6, r6, r9
 8008f3e:	ea4c 0606 	orr.w	r6, ip, r6
 8008f42:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008f44:	68c6      	ldr	r6, [r0, #12]
 8008f46:	fa93 fca3 	rbit	ip, r3
 8008f4a:	fabc fc8c 	clz	ip, ip
 8008f4e:	fa93 f9a3 	rbit	r9, r3
 8008f52:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008f56:	fab9 f989 	clz	r9, r9
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008f5a:	f1b8 0f02 	cmp.w	r8, #2
 8008f5e:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008f62:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008f66:	ea26 0c0c 	bic.w	ip, r6, ip
 8008f6a:	690e      	ldr	r6, [r1, #16]
 8008f6c:	fa06 f609 	lsl.w	r6, r6, r9
 8008f70:	ea4c 0606 	orr.w	r6, ip, r6
 8008f74:	60c6      	str	r6, [r0, #12]
 8008f76:	d11c      	bne.n	8008fb2 <LL_GPIO_Init+0x114>
 8008f78:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008f7c:	fab6 f686 	clz	r6, r6
 8008f80:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8008f84:	2e07      	cmp	r6, #7
 8008f86:	dc16      	bgt.n	8008fb6 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8008f88:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8008f8c:	fa93 f6a3 	rbit	r6, r3
 8008f90:	fab6 f686 	clz	r6, r6
 8008f94:	fa93 f3a3 	rbit	r3, r3
 8008f98:	fab3 f383 	clz	r3, r3
 8008f9c:	00b6      	lsls	r6, r6, #2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	fa07 f606 	lsl.w	r6, r7, r6
 8008fa4:	fa0c fc03 	lsl.w	ip, ip, r3
 8008fa8:	ea28 0606 	bic.w	r6, r8, r6
 8008fac:	ea46 060c 	orr.w	r6, r6, ip
 8008fb0:	6206      	str	r6, [r0, #32]
    pinpos++;
 8008fb2:	3401      	adds	r4, #1
 8008fb4:	e77e      	b.n	8008eb4 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008fb6:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8008fba:	0a1b      	lsrs	r3, r3, #8
 8008fbc:	fa93 f6a3 	rbit	r6, r3
 8008fc0:	fab6 f686 	clz	r6, r6
 8008fc4:	fa93 f3a3 	rbit	r3, r3
 8008fc8:	fab3 f383 	clz	r3, r3
 8008fcc:	00b6      	lsls	r6, r6, #2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	fa07 f606 	lsl.w	r6, r7, r6
 8008fd4:	fa0c f303 	lsl.w	r3, ip, r3
 8008fd8:	ea28 0606 	bic.w	r6, r8, r6
 8008fdc:	4333      	orrs	r3, r6
 8008fde:	6243      	str	r3, [r0, #36]	; 0x24
 8008fe0:	e7e7      	b.n	8008fb2 <LL_GPIO_Init+0x114>
	...

08008fe4 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8008fe4:	4b02      	ldr	r3, [pc, #8]	; (8008ff0 <LL_RCC_HSI_IsReady+0xc>)
 8008fe6:	6818      	ldr	r0, [r3, #0]
}
 8008fe8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40023800 	.word	0x40023800

08008ff4 <LL_RCC_LSE_IsReady>:
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <LL_RCC_LSE_IsReady+0xc>)
 8008ff6:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
 8008ff8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	40023800 	.word	0x40023800

08009004 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8009004:	4b03      	ldr	r3, [pc, #12]	; (8009014 <LL_RCC_GetUARTClockSource+0x10>)
 8009006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800900a:	4003      	ands	r3, r0
}
 800900c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	40023800 	.word	0x40023800

08009018 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009018:	4b03      	ldr	r3, [pc, #12]	; (8009028 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800901a:	4a04      	ldr	r2, [pc, #16]	; (800902c <RCC_GetHCLKClockFreq+0x14>)
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009022:	5cd3      	ldrb	r3, [r2, r3]
}
 8009024:	40d8      	lsrs	r0, r3
 8009026:	4770      	bx	lr
 8009028:	40023800 	.word	0x40023800
 800902c:	08009870 	.word	0x08009870

08009030 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009030:	4b03      	ldr	r3, [pc, #12]	; (8009040 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009032:	4a04      	ldr	r2, [pc, #16]	; (8009044 <RCC_GetPCLK1ClockFreq+0x14>)
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800903a:	5cd3      	ldrb	r3, [r2, r3]
}
 800903c:	40d8      	lsrs	r0, r3
 800903e:	4770      	bx	lr
 8009040:	40023800 	.word	0x40023800
 8009044:	08009880 	.word	0x08009880

08009048 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009048:	4b03      	ldr	r3, [pc, #12]	; (8009058 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800904a:	4a04      	ldr	r2, [pc, #16]	; (800905c <RCC_GetPCLK2ClockFreq+0x14>)
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009052:	5cd3      	ldrb	r3, [r2, r3]
}
 8009054:	40d8      	lsrs	r0, r3
 8009056:	4770      	bx	lr
 8009058:	40023800 	.word	0x40023800
 800905c:	08009880 	.word	0x08009880

08009060 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009060:	4b0c      	ldr	r3, [pc, #48]	; (8009094 <RCC_PLL_GetFreqDomain_SYS+0x34>)
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8009062:	490d      	ldr	r1, [pc, #52]	; (8009098 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 8009064:	6858      	ldr	r0, [r3, #4]
 8009066:	4a0d      	ldr	r2, [pc, #52]	; (800909c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8009068:	f400 0080 	and.w	r0, r0, #4194304	; 0x400000
 800906c:	2800      	cmp	r0, #0
 800906e:	bf08      	it	eq
 8009070:	460a      	moveq	r2, r1
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009072:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009074:	6858      	ldr	r0, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009076:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800907a:	685b      	ldr	r3, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800907c:	f3c0 1088 	ubfx	r0, r0, #6, #9

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009080:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009084:	fbb2 f2f1 	udiv	r2, r2, r1
 8009088:	3301      	adds	r3, #1
 800908a:	4350      	muls	r0, r2
 800908c:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 800908e:	fbb0 f0f3 	udiv	r0, r0, r3
 8009092:	4770      	bx	lr
 8009094:	40023800 	.word	0x40023800
 8009098:	00f42400 	.word	0x00f42400
 800909c:	017d7840 	.word	0x017d7840

080090a0 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <RCC_GetSystemClockFreq+0x1c>)
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	d003      	beq.n	80090b4 <RCC_GetSystemClockFreq+0x14>
 80090ac:	2b08      	cmp	r3, #8
 80090ae:	d003      	beq.n	80090b8 <RCC_GetSystemClockFreq+0x18>
      frequency = HSI_VALUE;
 80090b0:	4803      	ldr	r0, [pc, #12]	; (80090c0 <RCC_GetSystemClockFreq+0x20>)
}
 80090b2:	4770      	bx	lr
      frequency = HSE_VALUE;
 80090b4:	4803      	ldr	r0, [pc, #12]	; (80090c4 <RCC_GetSystemClockFreq+0x24>)
 80090b6:	4770      	bx	lr
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80090b8:	f7ff bfd2 	b.w	8009060 <RCC_PLL_GetFreqDomain_SYS>
 80090bc:	40023800 	.word	0x40023800
 80090c0:	00f42400 	.word	0x00f42400
 80090c4:	017d7840 	.word	0x017d7840

080090c8 <LL_RCC_GetUSARTClockFreq>:
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80090c8:	2803      	cmp	r0, #3
{
 80090ca:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80090cc:	d11c      	bne.n	8009108 <LL_RCC_GetUSARTClockFreq+0x40>
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80090ce:	f7ff ff99 	bl	8009004 <LL_RCC_GetUARTClockSource>
 80090d2:	4b29      	ldr	r3, [pc, #164]	; (8009178 <LL_RCC_GetUSARTClockFreq+0xb0>)
 80090d4:	4298      	cmp	r0, r3
 80090d6:	d009      	beq.n	80090ec <LL_RCC_GetUSARTClockFreq+0x24>
 80090d8:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 80090dc:	d00d      	beq.n	80090fa <LL_RCC_GetUSARTClockFreq+0x32>
 80090de:	3b01      	subs	r3, #1
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80090e0:	4298      	cmp	r0, r3
 80090e2:	d134      	bne.n	800914e <LL_RCC_GetUSARTClockFreq+0x86>
}
 80090e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          usart_frequency = RCC_GetSystemClockFreq();
 80090e8:	f7ff bfda 	b.w	80090a0 <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 80090ec:	f7ff ff7a 	bl	8008fe4 <LL_RCC_HSI_IsReady>
 80090f0:	b908      	cbnz	r0, 80090f6 <LL_RCC_GetUSARTClockFreq+0x2e>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80090f2:	2000      	movs	r0, #0
 80090f4:	bd08      	pop	{r3, pc}
          usart_frequency = HSI_VALUE;
 80090f6:	4821      	ldr	r0, [pc, #132]	; (800917c <LL_RCC_GetUSARTClockFreq+0xb4>)
 80090f8:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 80090fa:	f7ff ff7b 	bl	8008ff4 <LL_RCC_LSE_IsReady>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d0f7      	beq.n	80090f2 <LL_RCC_GetUSARTClockFreq+0x2a>
          usart_frequency = LSE_VALUE;
 8009102:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009106:	bd08      	pop	{r3, pc}
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8009108:	280c      	cmp	r0, #12
 800910a:	d112      	bne.n	8009132 <LL_RCC_GetUSARTClockFreq+0x6a>
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800910c:	f7ff ff7a 	bl	8009004 <LL_RCC_GetUARTClockSource>
 8009110:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <LL_RCC_GetUSARTClockFreq+0xb8>)
 8009112:	4298      	cmp	r0, r3
 8009114:	d0ea      	beq.n	80090ec <LL_RCC_GetUSARTClockFreq+0x24>
 8009116:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 800911a:	d0ee      	beq.n	80090fa <LL_RCC_GetUSARTClockFreq+0x32>
 800911c:	3b04      	subs	r3, #4
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800911e:	4298      	cmp	r0, r3
 8009120:	d0e0      	beq.n	80090e4 <LL_RCC_GetUSARTClockFreq+0x1c>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009122:	f7ff ffbd 	bl	80090a0 <RCC_GetSystemClockFreq>
 8009126:	f7ff ff77 	bl	8009018 <RCC_GetHCLKClockFreq>
}
 800912a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800912e:	f7ff bf7f 	b.w	8009030 <RCC_GetPCLK1ClockFreq>
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8009132:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 8009136:	d112      	bne.n	800915e <LL_RCC_GetUSARTClockFreq+0x96>
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009138:	f7ff ff64 	bl	8009004 <LL_RCC_GetUARTClockSource>
 800913c:	4b11      	ldr	r3, [pc, #68]	; (8009184 <LL_RCC_GetUSARTClockFreq+0xbc>)
 800913e:	4298      	cmp	r0, r3
 8009140:	d0d4      	beq.n	80090ec <LL_RCC_GetUSARTClockFreq+0x24>
 8009142:	f1b0 2f0c 	cmp.w	r0, #201329664	; 0xc000c00
 8009146:	d0d8      	beq.n	80090fa <LL_RCC_GetUSARTClockFreq+0x32>
 8009148:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800914c:	e7c8      	b.n	80090e0 <LL_RCC_GetUSARTClockFreq+0x18>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800914e:	f7ff ffa7 	bl	80090a0 <RCC_GetSystemClockFreq>
 8009152:	f7ff ff61 	bl	8009018 <RCC_GetHCLKClockFreq>
}
 8009156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800915a:	f7ff bf75 	b.w	8009048 <RCC_GetPCLK2ClockFreq>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800915e:	2830      	cmp	r0, #48	; 0x30
 8009160:	d1c7      	bne.n	80090f2 <LL_RCC_GetUSARTClockFreq+0x2a>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009162:	f7ff ff4f 	bl	8009004 <LL_RCC_GetUARTClockSource>
 8009166:	4b08      	ldr	r3, [pc, #32]	; (8009188 <LL_RCC_GetUSARTClockFreq+0xc0>)
 8009168:	4298      	cmp	r0, r3
 800916a:	d0bf      	beq.n	80090ec <LL_RCC_GetUSARTClockFreq+0x24>
 800916c:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 8009170:	d0c3      	beq.n	80090fa <LL_RCC_GetUSARTClockFreq+0x32>
 8009172:	3b10      	subs	r3, #16
 8009174:	e7d3      	b.n	800911e <LL_RCC_GetUSARTClockFreq+0x56>
 8009176:	bf00      	nop
 8009178:	00030002 	.word	0x00030002
 800917c:	00f42400 	.word	0x00f42400
 8009180:	000c0008 	.word	0x000c0008
 8009184:	0c000800 	.word	0x0c000800
 8009188:	00300020 	.word	0x00300020

0800918c <LL_RCC_GetUARTClockFreq>:
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800918c:	28c0      	cmp	r0, #192	; 0xc0
{
 800918e:	b508      	push	{r3, lr}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8009190:	d11c      	bne.n	80091cc <LL_RCC_GetUARTClockFreq+0x40>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8009192:	f7ff ff37 	bl	8009004 <LL_RCC_GetUARTClockSource>
 8009196:	4b26      	ldr	r3, [pc, #152]	; (8009230 <LL_RCC_GetUARTClockFreq+0xa4>)
 8009198:	4298      	cmp	r0, r3
 800919a:	d009      	beq.n	80091b0 <LL_RCC_GetUARTClockFreq+0x24>
 800919c:	f1b0 1fc0 	cmp.w	r0, #12583104	; 0xc000c0
 80091a0:	d00d      	beq.n	80091be <LL_RCC_GetUARTClockFreq+0x32>
 80091a2:	3b40      	subs	r3, #64	; 0x40
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80091a4:	4298      	cmp	r0, r3
 80091a6:	d13b      	bne.n	8009220 <LL_RCC_GetUARTClockFreq+0x94>
}
 80091a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          uart_frequency = RCC_GetSystemClockFreq();
 80091ac:	f7ff bf78 	b.w	80090a0 <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 80091b0:	f7ff ff18 	bl	8008fe4 <LL_RCC_HSI_IsReady>
 80091b4:	b908      	cbnz	r0, 80091ba <LL_RCC_GetUARTClockFreq+0x2e>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80091b6:	2000      	movs	r0, #0
 80091b8:	bd08      	pop	{r3, pc}
          uart_frequency = HSI_VALUE;
 80091ba:	481e      	ldr	r0, [pc, #120]	; (8009234 <LL_RCC_GetUARTClockFreq+0xa8>)
 80091bc:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 80091be:	f7ff ff19 	bl	8008ff4 <LL_RCC_LSE_IsReady>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d0f7      	beq.n	80091b6 <LL_RCC_GetUARTClockFreq+0x2a>
          uart_frequency = LSE_VALUE;
 80091c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80091ca:	bd08      	pop	{r3, pc}
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80091cc:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80091d0:	d10a      	bne.n	80091e8 <LL_RCC_GetUARTClockFreq+0x5c>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80091d2:	f7ff ff17 	bl	8009004 <LL_RCC_GetUARTClockSource>
 80091d6:	4b18      	ldr	r3, [pc, #96]	; (8009238 <LL_RCC_GetUARTClockFreq+0xac>)
 80091d8:	4298      	cmp	r0, r3
 80091da:	d0e9      	beq.n	80091b0 <LL_RCC_GetUARTClockFreq+0x24>
 80091dc:	f1b0 2f03 	cmp.w	r0, #50332416	; 0x3000300
 80091e0:	d0ed      	beq.n	80091be <LL_RCC_GetUARTClockFreq+0x32>
 80091e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80091e6:	e7dd      	b.n	80091a4 <LL_RCC_GetUARTClockFreq+0x18>
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 80091e8:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 80091ec:	d10a      	bne.n	8009204 <LL_RCC_GetUARTClockFreq+0x78>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80091ee:	f7ff ff09 	bl	8009004 <LL_RCC_GetUARTClockSource>
 80091f2:	4b12      	ldr	r3, [pc, #72]	; (800923c <LL_RCC_GetUARTClockFreq+0xb0>)
 80091f4:	4298      	cmp	r0, r3
 80091f6:	d0db      	beq.n	80091b0 <LL_RCC_GetUARTClockFreq+0x24>
 80091f8:	f1b0 2f30 	cmp.w	r0, #805318656	; 0x30003000
 80091fc:	d0df      	beq.n	80091be <LL_RCC_GetUARTClockFreq+0x32>
 80091fe:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8009202:	e7cf      	b.n	80091a4 <LL_RCC_GetUARTClockFreq+0x18>
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8009204:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8009208:	d1d5      	bne.n	80091b6 <LL_RCC_GetUARTClockFreq+0x2a>
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800920a:	f7ff fefb 	bl	8009004 <LL_RCC_GetUARTClockSource>
 800920e:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <LL_RCC_GetUARTClockFreq+0xb4>)
 8009210:	4298      	cmp	r0, r3
 8009212:	d0cd      	beq.n	80091b0 <LL_RCC_GetUARTClockFreq+0x24>
 8009214:	f1b0 2fc0 	cmp.w	r0, #3221274624	; 0xc000c000
 8009218:	d0d1      	beq.n	80091be <LL_RCC_GetUARTClockFreq+0x32>
 800921a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800921e:	e7c1      	b.n	80091a4 <LL_RCC_GetUARTClockFreq+0x18>
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009220:	f7ff ff3e 	bl	80090a0 <RCC_GetSystemClockFreq>
 8009224:	f7ff fef8 	bl	8009018 <RCC_GetHCLKClockFreq>
}
 8009228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800922c:	f7ff bf00 	b.w	8009030 <RCC_GetPCLK1ClockFreq>
 8009230:	00c00080 	.word	0x00c00080
 8009234:	00f42400 	.word	0x00f42400
 8009238:	03000200 	.word	0x03000200
 800923c:	30002000 	.word	0x30002000
 8009240:	c0008000 	.word	0xc0008000

08009244 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009244:	b538      	push	{r3, r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8009246:	6803      	ldr	r3, [r0, #0]
 8009248:	4604      	mov	r4, r0
 800924a:	460d      	mov	r5, r1
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800924c:	07db      	lsls	r3, r3, #31
 800924e:	d501      	bpl.n	8009254 <LL_USART_Init+0x10>
  ErrorStatus status = ERROR;
 8009250:	2000      	movs	r0, #0
 8009252:	bd38      	pop	{r3, r4, r5, pc}
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009254:	68ea      	ldr	r2, [r5, #12]
 8009256:	686b      	ldr	r3, [r5, #4]
 8009258:	6801      	ldr	r1, [r0, #0]
 800925a:	4313      	orrs	r3, r2
 800925c:	692a      	ldr	r2, [r5, #16]
 800925e:	4313      	orrs	r3, r2
 8009260:	69aa      	ldr	r2, [r5, #24]
 8009262:	4313      	orrs	r3, r2
 8009264:	4a2d      	ldr	r2, [pc, #180]	; (800931c <LL_USART_Init+0xd8>)
 8009266:	400a      	ands	r2, r1
 8009268:	4313      	orrs	r3, r2
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800926a:	68aa      	ldr	r2, [r5, #8]
 800926c:	6003      	str	r3, [r0, #0]
 800926e:	6843      	ldr	r3, [r0, #4]
 8009270:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009274:	4313      	orrs	r3, r2
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009276:	696a      	ldr	r2, [r5, #20]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009278:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800927a:	6883      	ldr	r3, [r0, #8]
 800927c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009280:	4313      	orrs	r3, r2
 8009282:	6083      	str	r3, [r0, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8009284:	4b26      	ldr	r3, [pc, #152]	; (8009320 <LL_USART_Init+0xdc>)
 8009286:	4298      	cmp	r0, r3
 8009288:	d11a      	bne.n	80092c0 <LL_USART_Init+0x7c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800928a:	2003      	movs	r0, #3
    }
    else if (USARTx == USART2)
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800928c:	f7ff ff1c 	bl	80090c8 <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009290:	2800      	cmp	r0, #0
 8009292:	d0dd      	beq.n	8009250 <LL_USART_Init+0xc>
        && (USART_InitStruct->BaudRate != 0U))
 8009294:	682a      	ldr	r2, [r5, #0]
 8009296:	2a00      	cmp	r2, #0
 8009298:	d0da      	beq.n	8009250 <LL_USART_Init+0xc>
                                          uint32_t BaudRate)
{
  register uint32_t usartdiv = 0x0U;
  register uint32_t brrtemp = 0x0U;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800929a:	69ab      	ldr	r3, [r5, #24]
 800929c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a0:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80092a4:	d135      	bne.n	8009312 <LL_USART_Init+0xce>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80092a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80092aa:	fbb3 f3f2 	udiv	r3, r3, r2
    brrtemp = usartdiv & 0xFFF0U;
 80092ae:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80092b2:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092b4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80092b8:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80092ba:	60e3      	str	r3, [r4, #12]
    {
      status = SUCCESS;
 80092bc:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80092be:	bd38      	pop	{r3, r4, r5, pc}
    else if (USARTx == USART2)
 80092c0:	4b18      	ldr	r3, [pc, #96]	; (8009324 <LL_USART_Init+0xe0>)
 80092c2:	4298      	cmp	r0, r3
 80092c4:	d101      	bne.n	80092ca <LL_USART_Init+0x86>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80092c6:	200c      	movs	r0, #12
 80092c8:	e7e0      	b.n	800928c <LL_USART_Init+0x48>
    else if (USARTx == USART3)
 80092ca:	4b17      	ldr	r3, [pc, #92]	; (8009328 <LL_USART_Init+0xe4>)
 80092cc:	4298      	cmp	r0, r3
 80092ce:	d101      	bne.n	80092d4 <LL_USART_Init+0x90>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80092d0:	2030      	movs	r0, #48	; 0x30
 80092d2:	e7db      	b.n	800928c <LL_USART_Init+0x48>
    else if (USARTx == USART6)
 80092d4:	4b15      	ldr	r3, [pc, #84]	; (800932c <LL_USART_Init+0xe8>)
 80092d6:	4298      	cmp	r0, r3
 80092d8:	d102      	bne.n	80092e0 <LL_USART_Init+0x9c>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 80092da:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80092de:	e7d5      	b.n	800928c <LL_USART_Init+0x48>
    else if (USARTx == UART4)
 80092e0:	4b13      	ldr	r3, [pc, #76]	; (8009330 <LL_USART_Init+0xec>)
 80092e2:	4298      	cmp	r0, r3
 80092e4:	d103      	bne.n	80092ee <LL_USART_Init+0xaa>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80092e6:	20c0      	movs	r0, #192	; 0xc0
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 80092e8:	f7ff ff50 	bl	800918c <LL_RCC_GetUARTClockFreq>
 80092ec:	e7d0      	b.n	8009290 <LL_USART_Init+0x4c>
    else if (USARTx == UART5)
 80092ee:	4b11      	ldr	r3, [pc, #68]	; (8009334 <LL_USART_Init+0xf0>)
 80092f0:	4298      	cmp	r0, r3
 80092f2:	d102      	bne.n	80092fa <LL_USART_Init+0xb6>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80092f4:	f44f 7040 	mov.w	r0, #768	; 0x300
 80092f8:	e7f6      	b.n	80092e8 <LL_USART_Init+0xa4>
    else if (USARTx == UART7)
 80092fa:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <LL_USART_Init+0xf4>)
 80092fc:	4298      	cmp	r0, r3
 80092fe:	d102      	bne.n	8009306 <LL_USART_Init+0xc2>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8009300:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8009304:	e7f0      	b.n	80092e8 <LL_USART_Init+0xa4>
    else if (USARTx == UART8)
 8009306:	4b0d      	ldr	r3, [pc, #52]	; (800933c <LL_USART_Init+0xf8>)
 8009308:	4298      	cmp	r0, r3
 800930a:	d1a1      	bne.n	8009250 <LL_USART_Init+0xc>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 800930c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8009310:	e7ea      	b.n	80092e8 <LL_USART_Init+0xa4>
 8009312:	4403      	add	r3, r0
 8009314:	fbb3 f3f2 	udiv	r3, r3, r2
 8009318:	b29b      	uxth	r3, r3
 800931a:	e7ce      	b.n	80092ba <LL_USART_Init+0x76>
 800931c:	efff69f3 	.word	0xefff69f3
 8009320:	40011000 	.word	0x40011000
 8009324:	40004400 	.word	0x40004400
 8009328:	40004800 	.word	0x40004800
 800932c:	40011400 	.word	0x40011400
 8009330:	40004c00 	.word	0x40004c00
 8009334:	40005000 	.word	0x40005000
 8009338:	40007800 	.word	0x40007800
 800933c:	40007c00 	.word	0x40007c00

08009340 <LL_USART_StructInit>:
  */

void LL_USART_StructInit(LL_USART_InitTypeDef *USART_InitStruct)
{
  /* Set USART_InitStruct fields to default values */
  USART_InitStruct->BaudRate            = 9600U;
 8009340:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  USART_InitStruct->DataWidth           = LL_USART_DATAWIDTH_8B;
  USART_InitStruct->StopBits            = LL_USART_STOPBITS_1;
  USART_InitStruct->Parity              = LL_USART_PARITY_NONE ;
  USART_InitStruct->TransferDirection   = LL_USART_DIRECTION_TX_RX;
 8009344:	220c      	movs	r2, #12
  USART_InitStruct->BaudRate            = 9600U;
 8009346:	6003      	str	r3, [r0, #0]
  USART_InitStruct->DataWidth           = LL_USART_DATAWIDTH_8B;
 8009348:	2300      	movs	r3, #0
  USART_InitStruct->TransferDirection   = LL_USART_DIRECTION_TX_RX;
 800934a:	6102      	str	r2, [r0, #16]
  USART_InitStruct->DataWidth           = LL_USART_DATAWIDTH_8B;
 800934c:	6043      	str	r3, [r0, #4]
  USART_InitStruct->StopBits            = LL_USART_STOPBITS_1;
 800934e:	6083      	str	r3, [r0, #8]
  USART_InitStruct->Parity              = LL_USART_PARITY_NONE ;
 8009350:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8009352:	6143      	str	r3, [r0, #20]
  USART_InitStruct->OverSampling        = LL_USART_OVERSAMPLING_16;
 8009354:	6183      	str	r3, [r0, #24]
 8009356:	4770      	bx	lr

08009358 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009358:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <MX_GPIO_Init+0x2c>)
{
 800935a:	b082      	sub	sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800935c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800935e:	f042 0201 	orr.w	r2, r2, #1
 8009362:	631a      	str	r2, [r3, #48]	; 0x30
 8009364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009366:	f002 0201 	and.w	r2, r2, #1
 800936a:	9200      	str	r2, [sp, #0]
 800936c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800936e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009370:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009374:	631a      	str	r2, [r3, #48]	; 0x30
 8009376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	9b01      	ldr	r3, [sp, #4]

}
 8009380:	b002      	add	sp, #8
 8009382:	4770      	bx	lr
 8009384:	40023800 	.word	0x40023800

08009388 <SystemClock_Config>:
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8009388:	4b29      	ldr	r3, [pc, #164]	; (8009430 <SystemClock_Config+0xa8>)
 800938a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800938c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8009390:	b530      	push	{r4, r5, lr}
	__HAL_RCC_PWR_CLK_ENABLE();
 8009392:	641a      	str	r2, [r3, #64]	; 0x40
{
 8009394:	b095      	sub	sp, #84	; 0x54
	__HAL_RCC_PWR_CLK_ENABLE();
 8009396:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009398:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 432;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800939a:	a807      	add	r0, sp, #28
	__HAL_RCC_PWR_CLK_ENABLE();
 800939c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	9b00      	ldr	r3, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80093a4:	4b23      	ldr	r3, [pc, #140]	; (8009434 <SystemClock_Config+0xac>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80093b0:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80093b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80093b6:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80093b8:	9412      	str	r4, [sp, #72]	; 0x48
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	9b01      	ldr	r3, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80093be:	2301      	movs	r3, #1
 80093c0:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80093c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093c6:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80093c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093cc:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 80093ce:	2319      	movs	r3, #25
 80093d0:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 432;
 80093d2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80093d6:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80093d8:	f7ff faa8 	bl	800892c <HAL_RCC_OscConfig>
 80093dc:	b100      	cbz	r0, 80093e0 <SystemClock_Config+0x58>
 80093de:	e7fe      	b.n	80093de <SystemClock_Config+0x56>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80093e0:	f7ff fa6c 	bl	80088bc <HAL_PWREx_EnableOverDrive>
 80093e4:	b100      	cbz	r0, 80093e8 <SystemClock_Config+0x60>
 80093e6:	e7fe      	b.n	80093e6 <SystemClock_Config+0x5e>
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80093e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80093ec:	250f      	movs	r5, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80093ee:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80093f0:	2107      	movs	r1, #7
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80093f2:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80093f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80093f8:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80093fa:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80093fc:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80093fe:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8009400:	f7ff fc56 	bl	8008cb0 <HAL_RCC_ClockConfig>
 8009404:	4604      	mov	r4, r0
 8009406:	b100      	cbz	r0, 800940a <SystemClock_Config+0x82>
 8009408:	e7fe      	b.n	8009408 <SystemClock_Config+0x80>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800940a:	f7ff fcef 	bl	8008dec <HAL_RCC_GetHCLKFreq>
 800940e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009412:	fbb0 f0f3 	udiv	r0, r0, r3
 8009416:	f7ff f935 	bl	8008684 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800941a:	2004      	movs	r0, #4
 800941c:	f7ff f948 	bl	80086b0 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8009420:	4622      	mov	r2, r4
 8009422:	4629      	mov	r1, r5
 8009424:	f04f 30ff 	mov.w	r0, #4294967295
 8009428:	f7ff f8f4 	bl	8008614 <HAL_NVIC_SetPriority>
}
 800942c:	b015      	add	sp, #84	; 0x54
 800942e:	bd30      	pop	{r4, r5, pc}
 8009430:	40023800 	.word	0x40023800
 8009434:	40007000 	.word	0x40007000

08009438 <main>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009438:	4c75      	ldr	r4, [pc, #468]	; (8009610 <main+0x1d8>)

	/*Config GPIO Pins for UART Function */
	GPIO_Handle.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
	GPIO_Handle.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_Handle.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_Handle.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800943a:	2500      	movs	r5, #0
	GPIO_Handle.Pull = LL_GPIO_PULL_UP;
 800943c:	2601      	movs	r6, #1
	GPIO_Handle.Alternate = LL_GPIO_AF_7;
 800943e:	f04f 0a07 	mov.w	sl, #7
	USART_Handle.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
	USART_Handle.OverSampling = LL_USART_OVERSAMPLING_16;
	USART_Handle.Parity = LL_USART_PARITY_NONE;
	USART_Handle.StopBits = LL_USART_STOPBITS_1;
	USART_Handle.TransferDirection = LL_USART_DIRECTION_TX_RX;
	LL_USART_Init(USART1,&USART_Handle);
 8009442:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8009638 <main+0x200>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8009446:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 800963c <main+0x204>
{
 800944a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800944e:	b0b1      	sub	sp, #196	; 0xc4
	GPIO_Handle.Mode = LL_GPIO_MODE_ALTERNATE;
 8009450:	2702      	movs	r7, #2
	HAL_Init();
 8009452:	f7ff f89d 	bl	8008590 <HAL_Init>
	DMA_RX_Handle.Channel 					= LL_DMA_CHANNEL_4;
	DMA_RX_Handle.Direction 				= LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
	DMA_RX_Handle.PeriphOrM2MSrcAddress 	= (uint32_t)&USART1->RDR;
	DMA_RX_Handle.MemoryOrM2MDstAddress 	= (uint32_t)UART_Buffer;
	DMA_RX_Handle.NbData 					= UART_RX_BUFFER_SIZE;
	DMA_RX_Handle.MemoryOrM2MDstIncMode 	= LL_DMA_MEMORY_INCREMENT;
 8009456:	f44f 6b80 	mov.w	fp, #1024	; 0x400
	SystemClock_Config();
 800945a:	f7ff ff95 	bl	8009388 <SystemClock_Config>
	MX_GPIO_Init();
 800945e:	f7ff ff7b 	bl	8009358 <MX_GPIO_Init>
 8009462:	6b23      	ldr	r3, [r4, #48]	; 0x30
	LL_GPIO_Init(GPIOA,&GPIO_Handle);
 8009464:	a905      	add	r1, sp, #20
 8009466:	486b      	ldr	r0, [pc, #428]	; (8009614 <main+0x1dc>)
 8009468:	f043 0301 	orr.w	r3, r3, #1
 800946c:	6323      	str	r3, [r4, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800946e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8009476:	9b04      	ldr	r3, [sp, #16]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8009478:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800947a:	f043 0310 	orr.w	r3, r3, #16
 800947e:	6463      	str	r3, [r4, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009480:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009482:	f003 0310 	and.w	r3, r3, #16
 8009486:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8009488:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800948a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800948c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009490:	6323      	str	r3, [r4, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8009492:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009498:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800949a:	9b02      	ldr	r3, [sp, #8]
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800949c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80094a0:	f023 0303 	bic.w	r3, r3, #3
 80094a4:	f043 0301 	orr.w	r3, r3, #1
 80094a8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	GPIO_Handle.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80094ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
	GPIO_Handle.Mode = LL_GPIO_MODE_ALTERNATE;
 80094b0:	9706      	str	r7, [sp, #24]
	GPIO_Handle.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80094b2:	9305      	str	r3, [sp, #20]
	GPIO_Handle.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80094b4:	2303      	movs	r3, #3
	GPIO_Handle.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80094b6:	9508      	str	r5, [sp, #32]
	GPIO_Handle.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80094b8:	9307      	str	r3, [sp, #28]
	GPIO_Handle.Pull = LL_GPIO_PULL_UP;
 80094ba:	9609      	str	r6, [sp, #36]	; 0x24
	GPIO_Handle.Alternate = LL_GPIO_AF_7;
 80094bc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOA,&GPIO_Handle);
 80094c0:	f7ff fced 	bl	8008e9e <LL_GPIO_Init>
	LL_USART_StructInit(&USART_Handle);
 80094c4:	a80b      	add	r0, sp, #44	; 0x2c
 80094c6:	f7ff ff3b 	bl	8009340 <LL_USART_StructInit>
	USART_Handle.BaudRate = 1000000;
 80094ca:	4b53      	ldr	r3, [pc, #332]	; (8009618 <main+0x1e0>)
	LL_USART_Init(USART1,&USART_Handle);
 80094cc:	a90b      	add	r1, sp, #44	; 0x2c
 80094ce:	4648      	mov	r0, r9
	USART_Handle.BaudRate = 1000000;
 80094d0:	930b      	str	r3, [sp, #44]	; 0x2c
	USART_Handle.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80094d2:	230c      	movs	r3, #12
	USART_Handle.DataWidth = LL_USART_DATAWIDTH_8B;
 80094d4:	950c      	str	r5, [sp, #48]	; 0x30
	USART_Handle.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80094d6:	930f      	str	r3, [sp, #60]	; 0x3c
	USART_Handle.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80094d8:	9510      	str	r5, [sp, #64]	; 0x40
	USART_Handle.OverSampling = LL_USART_OVERSAMPLING_16;
 80094da:	9511      	str	r5, [sp, #68]	; 0x44
	USART_Handle.Parity = LL_USART_PARITY_NONE;
 80094dc:	950e      	str	r5, [sp, #56]	; 0x38
	USART_Handle.StopBits = LL_USART_STOPBITS_1;
 80094de:	950d      	str	r5, [sp, #52]	; 0x34
	LL_USART_Init(USART1,&USART_Handle);
 80094e0:	f7ff feb0 	bl	8009244 <LL_USART_Init>
	USART1->ICR = USART_ICR_PECF|USART_ICR_FECF|USART_ICR_NCF|USART_ICR_ORECF|USART_ICR_IDLECF|USART_ICR_TCCF;
 80094e4:	235f      	movs	r3, #95	; 0x5f
	HAL_NVIC_SetPriority(USART1_IRQn,0,0);
 80094e6:	462a      	mov	r2, r5
 80094e8:	4629      	mov	r1, r5
 80094ea:	2025      	movs	r0, #37	; 0x25
	USART1->ICR = USART_ICR_PECF|USART_ICR_FECF|USART_ICR_NCF|USART_ICR_ORECF|USART_ICR_IDLECF|USART_ICR_TCCF;
 80094ec:	f8c9 3020 	str.w	r3, [r9, #32]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80094f0:	f8d9 3000 	ldr.w	r3, [r9]
 80094f4:	f043 0310 	orr.w	r3, r3, #16
 80094f8:	f8c9 3000 	str.w	r3, [r9]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80094fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009504:	f8c9 3008 	str.w	r3, [r9, #8]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8009508:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800950c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009510:	f8c9 3008 	str.w	r3, [r9, #8]
	HAL_NVIC_SetPriority(USART1_IRQn,0,0);
 8009514:	f7ff f87e 	bl	8008614 <HAL_NVIC_SetPriority>
 8009518:	2320      	movs	r3, #32
	LL_DMA_StructInit(&DMA_RX_Handle);
 800951a:	a812      	add	r0, sp, #72	; 0x48
 800951c:	f8c8 3004 	str.w	r3, [r8, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009520:	f8d9 3000 	ldr.w	r3, [r9]
 8009524:	4333      	orrs	r3, r6
 8009526:	f8c9 3000 	str.w	r3, [r9]
	DMA_RX_Handle.Channel 					= LL_DMA_CHANNEL_4;
 800952a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
	LL_DMA_StructInit(&DMA_RX_Handle);
 800952e:	f7ff fca5 	bl	8008e7c <LL_DMA_StructInit>
	DMA_RX_Handle.NbData 					= UART_RX_BUFFER_SIZE;
 8009532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	DMA_RX_Handle.PeriphOrM2MSrcAddress 	= (uint32_t)&USART1->RDR;
 8009536:	4b39      	ldr	r3, [pc, #228]	; (800961c <main+0x1e4>)
	DMA_RX_Handle.Priority 					= LL_DMA_PRIORITY_VERYHIGH;
	LL_DMA_Init(DMA2, LL_DMA_STREAM_2, &DMA_RX_Handle);
 8009538:	4639      	mov	r1, r7
	DMA_RX_Handle.NbData 					= UART_RX_BUFFER_SIZE;
 800953a:	921a      	str	r2, [sp, #104]	; 0x68
	DMA_RX_Handle.Priority 					= LL_DMA_PRIORITY_VERYHIGH;
 800953c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8009540:	4f37      	ldr	r7, [pc, #220]	; (8009620 <main+0x1e8>)
	DMA_RX_Handle.PeriphOrM2MSrcAddress 	= (uint32_t)&USART1->RDR;
 8009542:	9312      	str	r3, [sp, #72]	; 0x48
	DMA_RX_Handle.MemoryOrM2MDstAddress 	= (uint32_t)UART_Buffer;
 8009544:	4b37      	ldr	r3, [pc, #220]	; (8009624 <main+0x1ec>)
	DMA_RX_Handle.Priority 					= LL_DMA_PRIORITY_VERYHIGH;
 8009546:	921c      	str	r2, [sp, #112]	; 0x70
	LL_DMA_Init(DMA2, LL_DMA_STREAM_2, &DMA_RX_Handle);
 8009548:	aa12      	add	r2, sp, #72	; 0x48
 800954a:	4837      	ldr	r0, [pc, #220]	; (8009628 <main+0x1f0>)
	DMA_RX_Handle.MemoryOrM2MDstAddress 	= (uint32_t)UART_Buffer;
 800954c:	9313      	str	r3, [sp, #76]	; 0x4c
 800954e:	9301      	str	r3, [sp, #4]
	DMA_RX_Handle.Channel 					= LL_DMA_CHANNEL_4;
 8009550:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
	DMA_RX_Handle.Direction 				= LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8009554:	9514      	str	r5, [sp, #80]	; 0x50
	DMA_RX_Handle.MemoryOrM2MDstIncMode 	= LL_DMA_MEMORY_INCREMENT;
 8009556:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
	LL_DMA_Init(DMA2, LL_DMA_STREAM_2, &DMA_RX_Handle);
 800955a:	f7ff fc4d 	bl	8008df8 <LL_DMA_Init>
 800955e:	683a      	ldr	r2, [r7, #0]

	/* Enable DMA2 Stream2 Tranmission Complete Interrupt */
	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_2);

	/* Enable global DMA stream interrupts */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn,1,0);
 8009560:	4631      	mov	r1, r6
 8009562:	203a      	movs	r0, #58	; 0x3a
 8009564:	f042 0210 	orr.w	r2, r2, #16
 8009568:	603a      	str	r2, [r7, #0]
 800956a:	462a      	mov	r2, r5
 800956c:	f7ff f852 	bl	8008614 <HAL_NVIC_SetPriority>
 8009570:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000




	/* Configure DMA for USART TX */
	LL_DMA_StructInit(&DMA_TX_Handle);
 8009574:	a821      	add	r0, sp, #132	; 0x84
 8009576:	f8c8 2004 	str.w	r2, [r8, #4]
 800957a:	f7ff fc7f 	bl	8008e7c <LL_DMA_StructInit>
	DMA_TX_Handle.Channel 					= LL_DMA_CHANNEL_4;
	DMA_TX_Handle.Direction					= LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
	DMA_TX_Handle.PeriphOrM2MSrcAddress		= (uint32_t)&USART1->TDR;
	DMA_TX_Handle.MemoryOrM2MDstAddress		= (uint32_t)UART_Buffer;
 800957e:	9b01      	ldr	r3, [sp, #4]
	DMA_TX_Handle.PeriphOrM2MSrcAddress		= (uint32_t)&USART1->TDR;
 8009580:	4a2a      	ldr	r2, [pc, #168]	; (800962c <main+0x1f4>)
	DMA_TX_Handle.MemoryOrM2MDstIncMode		= LL_DMA_MEMORY_INCREMENT;
	DMA_TX_Handle.Priority					= LL_DMA_PRIORITY_HIGH;
	LL_DMA_Init(DMA2, LL_DMA_STREAM_7, &DMA_TX_Handle);
 8009582:	4651      	mov	r1, sl
	DMA_TX_Handle.Channel 					= LL_DMA_CHANNEL_4;
 8009584:	f8cd 90a8 	str.w	r9, [sp, #168]	; 0xa8
	DMA_TX_Handle.Direction					= LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8009588:	f04f 0940 	mov.w	r9, #64	; 0x40
	DMA_TX_Handle.MemoryOrM2MDstAddress		= (uint32_t)UART_Buffer;
 800958c:	9322      	str	r3, [sp, #136]	; 0x88
	DMA_TX_Handle.Priority					= LL_DMA_PRIORITY_HIGH;
 800958e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	DMA_TX_Handle.PeriphOrM2MSrcAddress		= (uint32_t)&USART1->TDR;
 8009592:	9221      	str	r2, [sp, #132]	; 0x84
	LL_DMA_Init(DMA2, LL_DMA_STREAM_7, &DMA_TX_Handle);
 8009594:	aa21      	add	r2, sp, #132	; 0x84
 8009596:	4824      	ldr	r0, [pc, #144]	; (8009628 <main+0x1f0>)
	DMA_TX_Handle.Priority					= LL_DMA_PRIORITY_HIGH;
 8009598:	932b      	str	r3, [sp, #172]	; 0xac
	DMA_TX_Handle.Direction					= LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800959a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
	DMA_TX_Handle.MemoryOrM2MDstIncMode		= LL_DMA_MEMORY_INCREMENT;
 800959e:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
	LL_DMA_Init(DMA2, LL_DMA_STREAM_7, &DMA_TX_Handle);
 80095a2:	f7ff fc29 	bl	8008df8 <LL_DMA_Init>
 80095a6:	4a22      	ldr	r2, [pc, #136]	; (8009630 <main+0x1f8>)

	/* Enable DMA2 Stream7 Tranmission Complete Interrupt */
	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_7);

	/* Enable global DMA stream interrupts */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn,1,0);
 80095a8:	4631      	mov	r1, r6
 80095aa:	2046      	movs	r0, #70	; 0x46
 80095ac:	6813      	ldr	r3, [r2, #0]
 80095ae:	f043 0310 	orr.w	r3, r3, #16
 80095b2:	6013      	str	r3, [r2, #0]
 80095b4:	462a      	mov	r2, r5
 80095b6:	f7ff f82d 	bl	8008614 <HAL_NVIC_SetPriority>
 80095ba:	f8c8 9008 	str.w	r9, [r8, #8]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80095be:	683b      	ldr	r3, [r7, #0]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOJ_CLK_ENABLE();


	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 80095c0:	462a      	mov	r2, r5
 80095c2:	f242 0120 	movw	r1, #8224	; 0x2020
 80095c6:	481b      	ldr	r0, [pc, #108]	; (8009634 <main+0x1fc>)
 80095c8:	4333      	orrs	r3, r6
 80095ca:	603b      	str	r3, [r7, #0]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80095cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80095ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095d2:	6323      	str	r3, [r4, #48]	; 0x30
 80095d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
		HAL_GPIO_TogglePin(GPIOJ,(uint16_t)(GPIO_PIN_5 | GPIO_PIN_13));
 80095d6:	f5a4 54a0 	sub.w	r4, r4, #5120	; 0x1400
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80095da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095de:	9312      	str	r3, [sp, #72]	; 0x48
 80095e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 80095e2:	f7ff f961 	bl	80088a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PJ13 PJ5 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80095e6:	f242 0320 	movw	r3, #8224	; 0x2020
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80095ea:	a921      	add	r1, sp, #132	; 0x84
 80095ec:	4811      	ldr	r0, [pc, #68]	; (8009634 <main+0x1fc>)
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80095ee:	9321      	str	r3, [sp, #132]	; 0x84
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095f0:	2303      	movs	r3, #3
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80095f2:	9622      	str	r6, [sp, #136]	; 0x88
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095f4:	9523      	str	r5, [sp, #140]	; 0x8c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095f6:	9324      	str	r3, [sp, #144]	; 0x90
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80095f8:	f7ff f86c 	bl	80086d4 <HAL_GPIO_Init>
		HAL_GPIO_TogglePin(GPIOJ,(uint16_t)(GPIO_PIN_5 | GPIO_PIN_13));
 80095fc:	4620      	mov	r0, r4
 80095fe:	f242 0120 	movw	r1, #8224	; 0x2020
 8009602:	f7ff f956 	bl	80088b2 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8009606:	20c8      	movs	r0, #200	; 0xc8
 8009608:	f7fe ffe0 	bl	80085cc <HAL_Delay>
 800960c:	e7f6      	b.n	80095fc <main+0x1c4>
 800960e:	bf00      	nop
 8009610:	40023800 	.word	0x40023800
 8009614:	40020000 	.word	0x40020000
 8009618:	000f4240 	.word	0x000f4240
 800961c:	40011024 	.word	0x40011024
 8009620:	40026440 	.word	0x40026440
 8009624:	20000030 	.word	0x20000030
 8009628:	40026400 	.word	0x40026400
 800962c:	40011028 	.word	0x40011028
 8009630:	400264b8 	.word	0x400264b8
 8009634:	40022400 	.word	0x40022400
 8009638:	40011000 	.word	0x40011000
 800963c:	e000e100 	.word	0xe000e100

08009640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009640:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009642:	2003      	movs	r0, #3
 8009644:	f7fe ffd4 	bl	80085f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8009648:	2200      	movs	r2, #0
 800964a:	f06f 000b 	mvn.w	r0, #11
 800964e:	4611      	mov	r1, r2
 8009650:	f7fe ffe0 	bl	8008614 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009654:	2200      	movs	r2, #0
 8009656:	f06f 000a 	mvn.w	r0, #10
 800965a:	4611      	mov	r1, r2
 800965c:	f7fe ffda 	bl	8008614 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8009660:	2200      	movs	r2, #0
 8009662:	f06f 0009 	mvn.w	r0, #9
 8009666:	4611      	mov	r1, r2
 8009668:	f7fe ffd4 	bl	8008614 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800966c:	2200      	movs	r2, #0
 800966e:	f06f 0004 	mvn.w	r0, #4
 8009672:	4611      	mov	r1, r2
 8009674:	f7fe ffce 	bl	8008614 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8009678:	2200      	movs	r2, #0
 800967a:	f06f 0003 	mvn.w	r0, #3
 800967e:	4611      	mov	r1, r2
 8009680:	f7fe ffc8 	bl	8008614 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8009684:	2200      	movs	r2, #0
 8009686:	f06f 0001 	mvn.w	r0, #1
 800968a:	4611      	mov	r1, r2
 800968c:	f7fe ffc2 	bl	8008614 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009690:	2200      	movs	r2, #0
 8009692:	f04f 30ff 	mov.w	r0, #4294967295
 8009696:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800969c:	f7fe bfba 	b.w	8008614 <HAL_NVIC_SetPriority>

080096a0 <NMI_Handler>:
 80096a0:	4770      	bx	lr

080096a2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80096a2:	e7fe      	b.n	80096a2 <HardFault_Handler>

080096a4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80096a4:	e7fe      	b.n	80096a4 <MemManage_Handler>

080096a6 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80096a6:	e7fe      	b.n	80096a6 <BusFault_Handler>

080096a8 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80096a8:	e7fe      	b.n	80096a8 <UsageFault_Handler>

080096aa <SVC_Handler>:
 80096aa:	4770      	bx	lr

080096ac <DebugMon_Handler>:
 80096ac:	4770      	bx	lr

080096ae <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80096ae:	4770      	bx	lr

080096b0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80096b0:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80096b2:	f7fe ff79 	bl	80085a8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80096b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 80096ba:	f7ff b806 	b.w	80086ca <HAL_SYSTICK_IRQHandler>
	...

080096c0 <USART1_IRQHandler>:
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 80096c0:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <USART1_IRQHandler+0x18>)
 80096c2:	69da      	ldr	r2, [r3, #28]
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
	if(LL_USART_IsActiveFlag_IDLE(USART1))
 80096c4:	06d2      	lsls	r2, r2, #27
 80096c6:	d506      	bpl.n	80096d6 <USART1_IRQHandler+0x16>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80096c8:	2210      	movs	r2, #16
 80096ca:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80096cc:	4a03      	ldr	r2, [pc, #12]	; (80096dc <USART1_IRQHandler+0x1c>)
 80096ce:	6813      	ldr	r3, [r2, #0]
 80096d0:	f023 0301 	bic.w	r3, r3, #1
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	4770      	bx	lr
 80096d8:	40011000 	.word	0x40011000
 80096dc:	40026440 	.word	0x40026440

080096e0 <DMA2_Stream2_IRQHandler>:
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 80096e0:	4b14      	ldr	r3, [pc, #80]	; (8009734 <DMA2_Stream2_IRQHandler+0x54>)
 80096e2:	681a      	ldr	r2, [r3, #0]
	}
}

void DMA2_Stream2_IRQHandler(void)
{
	if(LL_DMA_IsActiveFlag_TC2(DMA2))
 80096e4:	0292      	lsls	r2, r2, #10
 80096e6:	d523      	bpl.n	8009730 <DMA2_Stream2_IRQHandler+0x50>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 80096e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	{
		LL_DMA_ClearFlag_TC2(DMA2);

		NumberOfBytesReceive = UART_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 80096ec:	4912      	ldr	r1, [pc, #72]	; (8009738 <DMA2_Stream2_IRQHandler+0x58>)
 80096ee:	609a      	str	r2, [r3, #8]
 80096f0:	4a12      	ldr	r2, [pc, #72]	; (800973c <DMA2_Stream2_IRQHandler+0x5c>)
 80096f2:	6853      	ldr	r3, [r2, #4]
 80096f4:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	800b      	strh	r3, [r1, #0]

		/* Start Tranfer Data To USART TX register */
		if(NumberOfBytesReceive)
 80096fc:	880b      	ldrh	r3, [r1, #0]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	b15b      	cbz	r3, 800971a <DMA2_Stream2_IRQHandler+0x3a>
		{
			LL_DMA_SetDataLength(DMA2,LL_DMA_STREAM_7, NumberOfBytesReceive);
 8009702:	880b      	ldrh	r3, [r1, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8009704:	490e      	ldr	r1, [pc, #56]	; (8009740 <DMA2_Stream2_IRQHandler+0x60>)
 8009706:	b298      	uxth	r0, r3
 8009708:	684b      	ldr	r3, [r1, #4]
 800970a:	0c1b      	lsrs	r3, r3, #16
 800970c:	041b      	lsls	r3, r3, #16
 800970e:	4303      	orrs	r3, r0
 8009710:	604b      	str	r3, [r1, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8009712:	680b      	ldr	r3, [r1, #0]
 8009714:	f043 0301 	orr.w	r3, r3, #1
 8009718:	600b      	str	r3, [r1, #0]
			LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_7);
		}

		/* Clear all of flag DMA stream 2 */
		DMA2->LIFCR = DMA_LIFCR_CHTIF2 | DMA_LIFCR_CTCIF2 | DMA_LIFCR_CTEIF2 | DMA_LIFCR_CDMEIF2 | DMA_LIFCR_CFEIF2;
 800971a:	4b06      	ldr	r3, [pc, #24]	; (8009734 <DMA2_Stream2_IRQHandler+0x54>)
 800971c:	f44f 1174 	mov.w	r1, #3997696	; 0x3d0000
 8009720:	6099      	str	r1, [r3, #8]
		DMA2_Stream2->NDTR = UART_RX_BUFFER_SIZE;    	/* Set number of bytes to receive */
 8009722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009726:	6053      	str	r3, [r2, #4]
 8009728:	6813      	ldr	r3, [r2, #0]
 800972a:	f043 0301 	orr.w	r3, r3, #1
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	40026400 	.word	0x40026400
 8009738:	20000028 	.word	0x20000028
 800973c:	40026440 	.word	0x40026440
 8009740:	400264b8 	.word	0x400264b8

08009744 <DMA2_Stream7_IRQHandler>:
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF7)==(DMA_HISR_TCIF7));
 8009744:	4b06      	ldr	r3, [pc, #24]	; (8009760 <DMA2_Stream7_IRQHandler+0x1c>)
 8009746:	685a      	ldr	r2, [r3, #4]
}


void DMA2_Stream7_IRQHandler(void)
{
	if(LL_DMA_IsActiveFlag_TC7(DMA2))
 8009748:	0112      	lsls	r2, r2, #4
 800974a:	d507      	bpl.n	800975c <DMA2_Stream7_IRQHandler+0x18>
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF7);
 800974c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009750:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8009752:	4a04      	ldr	r2, [pc, #16]	; (8009764 <DMA2_Stream7_IRQHandler+0x20>)
 8009754:	6813      	ldr	r3, [r2, #0]
 8009756:	f023 0301 	bic.w	r3, r3, #1
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	40026400 	.word	0x40026400
 8009764:	400264b8 	.word	0x400264b8

08009768 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009768:	490e      	ldr	r1, [pc, #56]	; (80097a4 <SystemInit+0x3c>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800976a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800976c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8009770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8009778:	4b0b      	ldr	r3, [pc, #44]	; (80097a8 <SystemInit+0x40>)
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	f042 0201 	orr.w	r2, r2, #1
 8009780:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8009782:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800978a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800978e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009790:	4a06      	ldr	r2, [pc, #24]	; (80097ac <SystemInit+0x44>)
 8009792:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800979a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800979c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800979e:	4b04      	ldr	r3, [pc, #16]	; (80097b0 <SystemInit+0x48>)
 80097a0:	608b      	str	r3, [r1, #8]
 80097a2:	4770      	bx	lr
 80097a4:	e000ed00 	.word	0xe000ed00
 80097a8:	40023800 	.word	0x40023800
 80097ac:	24003010 	.word	0x24003010
 80097b0:	08008000 	.word	0x08008000

080097b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80097b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80097ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80097b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80097ba:	e003      	b.n	80097c4 <LoopCopyDataInit>

080097bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80097bc:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80097be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80097c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80097c2:	3104      	adds	r1, #4

080097c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80097c4:	480b      	ldr	r0, [pc, #44]	; (80097f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80097c6:	4b0c      	ldr	r3, [pc, #48]	; (80097f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80097c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80097ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80097cc:	d3f6      	bcc.n	80097bc <CopyDataInit>
  ldr  r2, =_sbss
 80097ce:	4a0b      	ldr	r2, [pc, #44]	; (80097fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80097d0:	e002      	b.n	80097d8 <LoopFillZerobss>

080097d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80097d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80097d4:	f842 3b04 	str.w	r3, [r2], #4

080097d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80097d8:	4b09      	ldr	r3, [pc, #36]	; (8009800 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80097da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80097dc:	d3f9      	bcc.n	80097d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80097de:	f7ff ffc3 	bl	8009768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80097e2:	f000 f811 	bl	8009808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80097e6:	f7ff fe27 	bl	8009438 <main>
  bx  lr    
 80097ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80097ec:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80097f0:	08009898 	.word	0x08009898
  ldr  r0, =_sdata
 80097f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80097f8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80097fc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8009800:	20000418 	.word	0x20000418

08009804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009804:	e7fe      	b.n	8009804 <ADC_IRQHandler>
	...

08009808 <__libc_init_array>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	4e0d      	ldr	r6, [pc, #52]	; (8009840 <__libc_init_array+0x38>)
 800980c:	4c0d      	ldr	r4, [pc, #52]	; (8009844 <__libc_init_array+0x3c>)
 800980e:	1ba4      	subs	r4, r4, r6
 8009810:	10a4      	asrs	r4, r4, #2
 8009812:	2500      	movs	r5, #0
 8009814:	42a5      	cmp	r5, r4
 8009816:	d109      	bne.n	800982c <__libc_init_array+0x24>
 8009818:	4e0b      	ldr	r6, [pc, #44]	; (8009848 <__libc_init_array+0x40>)
 800981a:	4c0c      	ldr	r4, [pc, #48]	; (800984c <__libc_init_array+0x44>)
 800981c:	f000 f818 	bl	8009850 <_init>
 8009820:	1ba4      	subs	r4, r4, r6
 8009822:	10a4      	asrs	r4, r4, #2
 8009824:	2500      	movs	r5, #0
 8009826:	42a5      	cmp	r5, r4
 8009828:	d105      	bne.n	8009836 <__libc_init_array+0x2e>
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009830:	4798      	blx	r3
 8009832:	3501      	adds	r5, #1
 8009834:	e7ee      	b.n	8009814 <__libc_init_array+0xc>
 8009836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800983a:	4798      	blx	r3
 800983c:	3501      	adds	r5, #1
 800983e:	e7f2      	b.n	8009826 <__libc_init_array+0x1e>
 8009840:	08009890 	.word	0x08009890
 8009844:	08009890 	.word	0x08009890
 8009848:	08009890 	.word	0x08009890
 800984c:	08009894 	.word	0x08009894

08009850 <_init>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	bf00      	nop
 8009854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009856:	bc08      	pop	{r3}
 8009858:	469e      	mov	lr, r3
 800985a:	4770      	bx	lr

0800985c <_fini>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr
